"""
Script de configuration pour int√©grer le syst√®me d'IA dans l'application musicale
√Ä appeler depuis le fichier principal de l'application
"""

import os
import sys

def setup_ai_system(main_app):
    """
    Configure et active le syst√®me d'IA pour l'application musicale
    
    Args:
        main_app: Instance de l'application musicale principale
    
    Returns:
        bool: True si l'IA a √©t√© configur√©e avec succ√®s, False sinon
    """
    
    try:
        print("üöÄ Configuration du syst√®me d'IA de recommandation...")
        
        # Importer le gestionnaire d'int√©gration
        from ai_integration import setup_ai_integration
        
        # Configurer l'int√©gration
        ai_manager = setup_ai_integration(main_app)
        
        if ai_manager:
            print("‚úÖ Syst√®me d'IA configur√© avec succ√®s!")
            
            # Afficher le statut
            status = main_app.ai_status()
            print(f"üìä Statut IA:")
            print(f"  - Activ√©: {status['enabled']}")
            print(f"  - Syst√®me disponible: {status['ai_system_available']}")
            print(f"  - ML disponible: {status['ml_available']}")
            print(f"  - Mod√®les entra√Æn√©s: {status['models_trained']}")
            
            # Ajouter des m√©thodes utilitaires √† l'application
            add_ai_utilities(main_app)
            
            # Programmer l'entra√Ænement automatique
            schedule_auto_training(main_app)
            
            return True
        else:
            print("‚ùå √âchec de la configuration du syst√®me d'IA")
            return False
            
    except ImportError as e:
        print(f"‚ö†Ô∏è Modules IA non disponibles: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur configuration IA: {e}")
        return False

def add_ai_utilities(main_app):
    """Ajoute des m√©thodes utilitaires IA √† l'application"""
    
    def show_ai_insights():
        """Affiche les insights IA dans la console"""
        try:
            insights = main_app.get_ai_insights()
            print("\nüß† Insights IA sur vos habitudes d'√©coute:")
            print(f"üìà Sessions d'√©coute: {insights.get('total_sessions', 0)}")
            print(f"‚è≠Ô∏è Chansons skipp√©es: {insights.get('total_skips', 0)}")
            print(f"‚ù§Ô∏è Chansons lik√©es: {insights.get('total_likes', 0)}")
            print(f"‚≠ê Chansons favorites: {insights.get('total_favorites', 0)}")
            print(f"üìä Taux de skip: {insights.get('skip_rate', 0):.1%}")
            print(f"üíñ Taux de like: {insights.get('like_rate', 0):.1%}")
            
            preferred_hours = insights.get('preferred_hours', [])
            if preferred_hours:
                print(f"üïê Heures pr√©f√©r√©es: {', '.join(f'{h}h' for h in preferred_hours)}")
            
            if hasattr(main_app, 'status_bar'):
                main_app.status_bar.config(text="Insights IA affich√©s dans la console")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur affichage insights: {e}")
    
    def train_ai_now():
        """Lance l'entra√Ænement des mod√®les IA maintenant"""
        try:
            print("ü§ñ Lancement de l'entra√Ænement des mod√®les IA...")
            main_app.train_ai_models()
            if hasattr(main_app, 'status_bar'):
                main_app.status_bar.config(text="Entra√Ænement IA lanc√© (voir console)")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur entra√Ænement IA: {e}")
    
    def toggle_ai():
        """Active/d√©sactive le syst√®me d'IA"""
        try:
            status = main_app.ai_status()
            if status['enabled']:
                main_app.ai_disable()
                message = "IA d√©sactiv√©e"
            else:
                main_app.ai_enable()
                message = "IA activ√©e"
            
            print(f"üîÑ {message}")
            if hasattr(main_app, 'status_bar'):
                main_app.status_bar.config(text=message)
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur toggle IA: {e}")
    
    def ai_recommend_from_playlist():
        """Recommande la meilleure chanson de la playlist actuelle"""
        try:
            if not hasattr(main_app, 'main_playlist') or not main_app.main_playlist:
                print("‚ö†Ô∏è Aucune playlist disponible pour la recommandation")
                return
            
            # Prendre quelques chansons al√©atoires de la playlist pour la recommandation
            import random
            candidates = random.sample(main_app.main_playlist, min(10, len(main_app.main_playlist)))
            
            recommended = main_app.get_ai_recommendation(candidates)
            if recommended:
                song_name = os.path.basename(recommended)
                print(f"üéµ IA recommande: {song_name}")
                
                # Optionnel: jouer la chanson recommand√©e
                if recommended in main_app.main_playlist:
                    main_app.current_index = main_app.main_playlist.index(recommended)
                    main_app.play_track()
                    
                if hasattr(main_app, 'status_bar'):
                    main_app.status_bar.config(text=f"IA recommande: {song_name}")
            else:
                print("‚ö†Ô∏è Aucune recommandation IA disponible")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur recommandation IA: {e}")
    
    # Ajouter les m√©thodes √† l'application
    main_app.show_ai_insights = show_ai_insights
    main_app.train_ai_now = train_ai_now
    main_app.toggle_ai = toggle_ai
    main_app.ai_recommend_from_playlist = ai_recommend_from_playlist
    
    print("üîß M√©thodes utilitaires IA ajout√©es")

def schedule_auto_training(main_app):
    """Programme l'entra√Ænement automatique des mod√®les"""
    
    def check_auto_training():
        """V√©rifie s'il faut lancer l'entra√Ænement automatique"""
        try:
            if main_app.ai_should_retrain():
                print("ü§ñ Entra√Ænement automatique des mod√®les IA...")
                main_app.train_ai_models()
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur v√©rification auto-training: {e}")
        
        # Programmer la prochaine v√©rification dans 5 minutes
        if hasattr(main_app, 'root'):
            main_app.root.after(300000, check_auto_training)  # 5 minutes
    
    # Programmer la premi√®re v√©rification dans 1 minute
    if hasattr(main_app, 'root'):
        main_app.root.after(60000, check_auto_training)  # 1 minute
        print("‚è∞ Entra√Ænement automatique programm√©")

def create_ai_menu(main_app):
    """Cr√©e un menu IA dans l'interface utilisateur (si possible)"""
    
    try:
        import tkinter as tk
        
        # V√©rifier si l'application a une barre de menu
        if hasattr(main_app, 'menubar'):
            # Cr√©er le menu IA
            ai_menu = tk.Menu(main_app.menubar, tearoff=0)
            
            ai_menu.add_command(label="Afficher les insights", command=main_app.show_ai_insights)
            ai_menu.add_command(label="Entra√Æner les mod√®les", command=main_app.train_ai_now)
            ai_menu.add_command(label="Recommandation IA", command=main_app.ai_recommend_from_playlist)
            ai_menu.add_separator()
            ai_menu.add_command(label="Activer/D√©sactiver IA", command=main_app.toggle_ai)
            
            main_app.menubar.add_cascade(label="IA", menu=ai_menu)
            print("üìã Menu IA ajout√© √† l'interface")
            
        # Ou cr√©er des boutons si possible
        elif hasattr(main_app, 'root'):
            create_ai_buttons(main_app)
            
    except Exception as e:
        print(f"‚ö†Ô∏è Impossible de cr√©er le menu IA: {e}")

def create_ai_buttons(main_app):
    """Cr√©e des boutons IA dans l'interface"""
    
    try:
        import tkinter as tk
        
        # Cr√©er un frame pour les boutons IA
        ai_frame = tk.Frame(main_app.root)
        ai_frame.pack(side=tk.BOTTOM, fill=tk.X, padx=5, pady=2)
        
        # Bouton insights
        insights_btn = tk.Button(ai_frame, text="üß† Insights IA", 
                               command=main_app.show_ai_insights,
                               font=("Arial", 8))
        insights_btn.pack(side=tk.LEFT, padx=2)
        
        # Bouton recommandation
        recommend_btn = tk.Button(ai_frame, text="üéµ Recommandation", 
                                command=main_app.ai_recommend_from_playlist,
                                font=("Arial", 8))
        recommend_btn.pack(side=tk.LEFT, padx=2)
        
        # Bouton toggle IA
        toggle_btn = tk.Button(ai_frame, text="ü§ñ Toggle IA", 
                             command=main_app.toggle_ai,
                             font=("Arial", 8))
        toggle_btn.pack(side=tk.LEFT, padx=2)
        
        print("üîò Boutons IA ajout√©s √† l'interface")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Impossible de cr√©er les boutons IA: {e}")

def print_ai_help():
    """Affiche l'aide pour utiliser le syst√®me d'IA"""
    
    help_text = """
ü§ñ SYST√àME D'IA DE RECOMMANDATION MUSICALE

üìã FONCTIONNALIT√âS:
‚Ä¢ Analyse automatique de vos habitudes d'√©coute
‚Ä¢ D√©tection des skips, likes, et favoris
‚Ä¢ Pr√©diction de vos pr√©f√©rences musicales
‚Ä¢ Recommandations personnalis√©es
‚Ä¢ Insights sur vos patterns d'√©coute

üéØ M√âTHODES DISPONIBLES:
‚Ä¢ main_app.show_ai_insights() - Affiche vos statistiques d'√©coute
‚Ä¢ main_app.train_ai_now() - Lance l'entra√Ænement des mod√®les
‚Ä¢ main_app.ai_recommend_from_playlist() - Recommande une chanson
‚Ä¢ main_app.toggle_ai() - Active/d√©sactive l'IA
‚Ä¢ main_app.ai_status() - Affiche le statut du syst√®me

üìä DONN√âES ANALYS√âES:
‚Ä¢ Dur√©e d'√©coute de chaque chanson
‚Ä¢ Fr√©quence des skips
‚Ä¢ Patterns temporels (heure, jour)
‚Ä¢ Historique des likes et favoris
‚Ä¢ Changements de volume
‚Ä¢ S√©quences de chansons

üîß CONFIGURATION:
‚Ä¢ Les donn√©es sont sauvegard√©es automatiquement
‚Ä¢ L'entra√Ænement se fait automatiquement tous les 50 titres
‚Ä¢ Les mod√®les s'am√©liorent avec l'usage

üí° CONSEILS:
‚Ä¢ Plus vous utilisez l'application, plus l'IA devient pr√©cise
‚Ä¢ Les recommandations s'am√©liorent apr√®s quelques sessions
‚Ä¢ Utilisez les likes/favoris pour am√©liorer les pr√©dictions
"""
    
    print(help_text)

# Fonction principale d'installation
def install_ai_system(main_app, create_ui=True, show_help=True):
    """
    Installation compl√®te du syst√®me d'IA
    
    Args:
        main_app: Instance de l'application musicale
        create_ui: Cr√©er l'interface utilisateur pour l'IA
        show_help: Afficher l'aide
    
    Returns:
        bool: True si l'installation a r√©ussi
    """
    
    print("üöÄ Installation du syst√®me d'IA de recommandation musicale...")
    
    # Configurer le syst√®me de base
    success = setup_ai_system(main_app)
    
    if success:
        # Cr√©er l'interface utilisateur si demand√©
        if create_ui:
            create_ai_menu(main_app)
        
        # Afficher l'aide si demand√©
        if show_help:
            print_ai_help()
        
        print("‚úÖ Installation du syst√®me d'IA termin√©e avec succ√®s!")
        print("üéµ L'IA va maintenant analyser vos habitudes d'√©coute en temps r√©el")
        
        return True
    else:
        print("‚ùå √âchec de l'installation du syst√®me d'IA")
        return False

if __name__ == "__main__":
    # Test d'installation
    print("üß™ Test d'installation du syst√®me d'IA")
    
    class MockApp:
        def __init__(self):
            import tkinter as tk
            self.root = tk.Tk()
            self.root.withdraw()  # Cacher la fen√™tre de test
            self.main_playlist = []
            self.current_index = 0
            self.status_bar = None
        
        def play_track(self):
            pass
    
    mock_app = MockApp()
    success = install_ai_system(mock_app, create_ui=False, show_help=True)
    
    if success:
        print("‚úÖ Test d'installation r√©ussi")
        # Tester quelques fonctionnalit√©s
        status = mock_app.ai_status()
        print("Status:", status)
    else:
        print("‚ùå Test d'installation √©chou√©")
    
    mock_app.root.destroy()