#!/usr/bin/env python3
"""
Test du nouveau syst√®me de chargement progressif :
- Chargement initial : chanson courante + 10 suivantes
- Scroll vers le bas : +10 musiques automatiquement
- Jamais de d√©chargement (garder tout)
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
parent_dir = os.path.dirname(os.path.abspath(__file__))
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

def test_progressive_system_activation():
    """Test activation du nouveau syst√®me progressif"""
    print("=== Test activation syst√®me progressif ===")
    
    try:
        from main import MusicPlayer
        from search_tab.config import update_main_playlist_config, get_main_playlist_config
        import tkinter as tk
        
        # Configuration du nouveau syst√®me
        update_main_playlist_config(
            debug_scroll=True,
            enable_progressive_loading=True,  # NOUVEAU SYST√àME
            enable_smart_loading=False,       # Ancien syst√®me d√©sactiv√©
            auto_unload_unused=False,         # Pas de d√©chargement
            initial_load_after_current=10,    # 10 apr√®s la courante
            load_more_on_scroll=10,           # +10 en scrollant
            scroll_trigger_threshold=0.9      # √Ä 90% vers le bas
        )
        
        root = tk.Tk()
        root.withdraw()
        
        player = MusicPlayer(root)
        
        # V√©rifier la configuration
        print(f"‚úì Progressive loading: {get_main_playlist_config('enable_progressive_loading')}")
        print(f"‚úì Ancien syst√®me: {get_main_playlist_config('enable_smart_loading')}")  
        print(f"‚úì Pas d√©chargement: {get_main_playlist_config('never_unload')}")
        print(f"‚úì Chargement initial: {get_main_playlist_config('initial_load_after_current')}")
        print(f"‚úì Chargement scroll: {get_main_playlist_config('load_more_on_scroll')}")
        
        # V√©rifier les nouvelles fonctions
        required_functions = [
            '_progressive_load_system',
            '_setup_progressive_scroll_detection', 
            '_on_progressive_scroll',
            '_load_more_on_scroll',
            '_append_progressive_items',
            '_is_index_already_loaded',
            '_find_relative_index_in_loaded'
        ]
        
        missing = []
        for func_name in required_functions:
            if hasattr(player, func_name):
                print(f"‚úÖ {func_name}")
            else:
                print(f"‚ùå {func_name}")
                missing.append(func_name)
        
        root.destroy()
        
        if missing:
            print(f"\n‚ùå Fonctions manquantes: {missing}")
            return False
        
        print("\n‚úÖ Syst√®me progressif correctement activ√© !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur test activation: {e}")
        return False

def test_initial_progressive_load():
    """Test du chargement initial progressif"""
    print("\n=== Test chargement initial progressif ===")
    
    try:
        from main import MusicPlayer
        from search_tab.config import update_main_playlist_config
        import tkinter as tk
        
        # Configuration
        update_main_playlist_config(
            debug_scroll=True,
            enable_progressive_loading=True,
            initial_load_after_current=10
        )
        
        root = tk.Tk()
        root.withdraw()
        
        player = MusicPlayer(root)
        
        # Playlist de test
        player.main_playlist = [f"progressive_{i:03d}.mp3" for i in range(1, 101)]  # 100 musiques
        
        print(f"‚úì Playlist: {len(player.main_playlist)} musiques")
        
        # Test positions diff√©rentes
        test_positions = [
            ("D√©but playlist", 5),
            ("Milieu playlist", 50), 
            ("Pr√®s de la fin", 85)
        ]
        
        for test_name, position in test_positions:
            print(f"\n--- {test_name} (position {position}) ---")
            
            # Vider d'abord (simuler playlist vide)
            if hasattr(player, 'playlist_container'):
                for child in player.playlist_container.winfo_children():
                    try:
                        child.destroy()
                    except:
                        pass
            
            # Positionner et d√©clencher le chargement progressif
            player.current_index = position
            print(f"  Position courante: {player.current_index}")
            
            # D√©clencher le chargement progressif
            player._progressive_load_system()
            
            # V√©rifier ce qui a √©t√© charg√©
            loaded_count = len(player.playlist_container.winfo_children()) if hasattr(player, 'playlist_container') else 0
            print(f"  √âl√©ments charg√©s: {loaded_count}")
            
            # V√©rifier qu'on a bien charg√© courante + 10 (max 11 √©l√©ments)
            expected_max = min(11, len(player.main_playlist) - position)
            if loaded_count <= expected_max and loaded_count > 0:
                print(f"  ‚úÖ Chargement correct ({loaded_count}/{expected_max} max)")
            else:
                print(f"  ‚ùå Chargement incorrect ({loaded_count}/{expected_max} attendu)")
                return False
                
            # V√©rifier que la chanson courante est charg√©e
            if player._is_index_already_loaded(position):
                print(f"  ‚úÖ Chanson courante ({position}) bien charg√©e")
            else:
                print(f"  ‚ùå Chanson courante ({position}) pas charg√©e !")
                return False
        
        root.destroy()
        print("\n‚úÖ Chargement initial progressif fonctionne !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur test chargement initial: {e}")
        return False

def test_scroll_load_more():
    """Test du chargement suppl√©mentaire en scrollant"""
    print("\n=== Test scroll load more ===")
    
    try:
        from main import MusicPlayer
        from search_tab.config import update_main_playlist_config
        import tkinter as tk
        
        # Configuration
        update_main_playlist_config(
            debug_scroll=True,
            enable_progressive_loading=True,
            initial_load_after_current=5,  # Charger moins au d√©but pour tester le scroll
            load_more_on_scroll=8,         # +8 en scrollant
            scroll_trigger_threshold=0.9
        )
        
        root = tk.Tk()
        root.withdraw()
        
        player = MusicPlayer(root)
        
        # Grande playlist
        player.main_playlist = [f"scroll_test_{i:03d}.mp3" for i in range(1, 201)]  # 200 musiques
        
        print(f"‚úì Grande playlist: {len(player.main_playlist)} musiques")
        
        # Chargement initial
        player.current_index = 10
        player._progressive_load_system()
        
        initial_loaded = len(player.playlist_container.winfo_children())
        print(f"  Chargement initial: {initial_loaded} √©l√©ments")
        
        # Simuler plusieurs cycles de "scroll load more"
        scroll_cycles = 3
        
        for cycle in range(1, scroll_cycles + 1):
            print(f"\n--- Cycle scroll {cycle} ---")
            
            # D√©clencher load more
            print(f"  üîÑ D√©clenchement load more...")
            player._load_more_on_scroll()
            
            # V√©rifier nouveau nombre d'√©l√©ments charg√©s
            new_loaded = len(player.playlist_container.winfo_children())
            added = new_loaded - (initial_loaded + (cycle-1) * 8)  # 8 = load_more_on_scroll
            
            print(f"  √âl√©ments apr√®s cycle {cycle}: {new_loaded}")
            print(f"  √âl√©ments ajout√©s ce cycle: {added}")
            
            if added > 0:
                print(f"  ‚úÖ Load more cycle {cycle} r√©ussi")
            else:
                print(f"  ‚ö†Ô∏è Load more cycle {cycle}: rien ajout√© (peut-√™tre d√©j√† tout charg√©)")
        
        final_loaded = len(player.playlist_container.winfo_children())
        total_added = final_loaded - initial_loaded
        
        print(f"\nüìä R√©sum√©:")
        print(f"  Chargement initial: {initial_loaded}")
        print(f"  Total final: {final_loaded}")
        print(f"  Total ajout√© par scroll: {total_added}")
        print(f"  Pourcentage playlist charg√©e: {final_loaded/len(player.main_playlist)*100:.1f}%")
        
        # V√©rifier qu'on n'a JAMAIS d√©charg√© (principe du nouveau syst√®me)
        if final_loaded >= initial_loaded:
            print(f"  ‚úÖ Aucun d√©chargement d√©tect√© (syst√®me respect√©)")
        else:
            print(f"  ‚ùå D√©chargement d√©tect√© ! (syst√®me non respect√©)")
            return False
        
        root.destroy()
        print("\n‚úÖ Scroll load more fonctionne !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur test scroll load more: {e}")
        return False

def test_no_unloading_ever():
    """Test que le syst√®me ne d√©charge jamais rien"""
    print("\n=== Test pas de d√©chargement ===")
    
    try:
        from main import MusicPlayer
        from search_tab.config import update_main_playlist_config
        import tkinter as tk
        
        # Configuration
        update_main_playlist_config(
            debug_scroll=True,
            enable_progressive_loading=True,
            never_unload=True,
            initial_load_after_current=15
        )
        
        root = tk.Tk()
        root.withdraw()
        
        player = MusicPlayer(root)
        
        # Playlist de test
        player.main_playlist = [f"no_unload_{i:03d}.mp3" for i in range(1, 151)]  # 150 musiques
        
        print(f"‚úì Playlist test: {len(player.main_playlist)} musiques")
        
        # Test de changements de position extr√™mes
        positions = [10, 80, 20, 130, 5, 90]
        loaded_counts = []
        
        for i, position in enumerate(positions):
            print(f"\n--- Changement {i+1}: Position {position} ---")
            
            player.current_index = position
            player._progressive_load_system()
            
            loaded = len(player.playlist_container.winfo_children())
            loaded_counts.append(loaded)
            
            print(f"  Position: {position}")
            print(f"  √âl√©ments charg√©s: {loaded}")
            
            # V√©rifier qu'on n'a jamais moins d'√©l√©ments qu'avant
            if i > 0 and loaded < loaded_counts[i-1]:
                print(f"  ‚ùå D√âCHARGEMENT D√âTECT√â ! {loaded_counts[i-1]} ‚Üí {loaded}")
                return False
            else:
                print(f"  ‚úÖ Pas de d√©chargement ({loaded} >= {loaded_counts[i-1] if i > 0 else 0})")
        
        print(f"\nüìä √âvolution chargement:")
        for i, (pos, count) in enumerate(zip(positions, loaded_counts)):
            print(f"  Position {pos}: {count} √©l√©ments charg√©s")
        
        # V√©rifier que la tendance est toujours croissante ou stable
        decreasing = False
        for i in range(1, len(loaded_counts)):
            if loaded_counts[i] < loaded_counts[i-1]:
                decreasing = True
                break
        
        if not decreasing:
            print(f"‚úÖ Principe 'jamais de d√©chargement' respect√© !")
        else:
            print(f"‚ùå Principe 'jamais de d√©chargement' viol√© !")
            return False
        
        root.destroy()
        print("\n‚úÖ Test pas de d√©chargement r√©ussi !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur test pas de d√©chargement: {e}")
        return False

def test_integration_with_controls():
    """Test int√©gration avec les contr√¥les (auto-scroll)"""
    print("\n=== Test int√©gration contr√¥les ===")
    
    try:
        from main import MusicPlayer
        from search_tab.config import update_main_playlist_config
        import tkinter as tk
        
        # Configuration
        update_main_playlist_config(
            debug_scroll=True,
            enable_progressive_loading=True
        )
        
        root = tk.Tk()
        root.withdraw()
        
        player = MusicPlayer(root)
        player.auto_scroll_enabled = True
        
        # Playlist
        player.main_playlist = [f"control_test_{i:03d}.mp3" for i in range(1, 101)]  # 100 musiques
        
        print(f"‚úì Playlist: {len(player.main_playlist)} musiques")
        print(f"‚úì Auto-scroll activ√©: {player.auto_scroll_enabled}")
        
        # Test des fonctions d'auto-scroll avec le nouveau syst√®me
        test_scenarios = [
            ("Auto-scroll position 30", 30),
            ("Auto-scroll position 70", 70),
            ("Auto-scroll position 5", 5)
        ]
        
        for scenario_name, position in test_scenarios:
            print(f"\n--- {scenario_name} ---")
            
            player.current_index = position
            print(f"  Position: {position}")
            
            # Test de la fonction select_current_song_smart avec le nouveau syst√®me
            print(f"  üéÆ Test select_current_song_smart...")
            player.select_current_song_smart(auto_scroll=True)
            
            # V√©rifier que la chanson est charg√©e et accessible
            if player._is_index_already_loaded(position):
                relative_index = player._find_relative_index_in_loaded(position)
                if relative_index is not None:
                    print(f"  ‚úÖ Chanson {position} charg√©e et trouv√©e (index relatif: {relative_index})")
                else:
                    print(f"  ‚ùå Chanson {position} charg√©e mais index relatif non trouv√©")
                    return False
            else:
                print(f"  ‚ùå Chanson {position} pas charg√©e apr√®s select_current_song_smart")
                return False
        
        root.destroy()
        print("\n‚úÖ Int√©gration contr√¥les r√©ussie !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur test int√©gration: {e}")
        return False

def show_progressive_system_summary():
    """R√©sum√© du nouveau syst√®me de chargement progressif"""
    print("\n" + "="*80)
    print("üéâ NOUVEAU SYST√àME DE CHARGEMENT PROGRESSIF")
    print("="*80)
    
    print("\n‚úÖ FONCTIONNEMENT:")
    print("   1. üéµ Chargement initial: Chanson courante + 10 suivantes")
    print("   2. üìú Scroll vers le bas: +10 musiques automatiquement √† 90%")
    print("   3. üîí Jamais de d√©chargement: Tout ce qui est charg√© reste charg√©")
    print("   4. üéÆ Auto-scroll intelligent: Compatible avec les contr√¥les")
    
    print("\nüîß CONFIGURATION:")
    print("   ‚Ä¢ enable_progressive_loading: True (nouveau syst√®me)")
    print("   ‚Ä¢ enable_smart_loading: False (ancien syst√®me d√©sactiv√©)")
    print("   ‚Ä¢ initial_load_after_current: 10 musiques apr√®s courante")
    print("   ‚Ä¢ load_more_on_scroll: 10 musiques de plus en scrollant")
    print("   ‚Ä¢ scroll_trigger_threshold: 0.9 (√† 90% vers le bas)")
    print("   ‚Ä¢ never_unload: True (jamais de d√©chargement)")
    
    print("\n‚ö° AVANTAGES:")
    print("   ‚úÖ Performance optimis√©e (charge seulement ce qui est n√©cessaire)")
    print("   ‚úÖ Exp√©rience utilisateur fluide (scroll infini naturel)")
    print("   ‚úÖ Pas de 'flashs' d'affichage (pas de d√©chargement)")
    print("   ‚úÖ Compatible avec toutes les fonctionnalit√©s existantes")
    print("   ‚úÖ Adaptatif (charge plus selon les besoins)")
    
    print("\nüéÆ UTILISATION:")
    print("   üéµ Lancez une playlist ‚Üí Chargement automatique courante + 10")
    print("   üìú Scrollez vers le bas ‚Üí +10 musiques charg√©es automatiquement")
    print("   ‚è≠Ô∏è Changez de musique ‚Üí Auto-scroll vers la nouvelle position")
    print("   üéØ Cliquez bouton find ‚Üí Scroll direct vers courante")
    print("   üîÑ Navigation quelconque ‚Üí Chargement adaptatif intelligent")
    
    print("\nüìä EFFICACIT√â:")
    print("   ‚Ä¢ Playlists petites (< 50): Chargement minimal n√©cessaire")
    print("   ‚Ä¢ Playlists moyennes (50-200): Chargement progressif optimal")
    print("   ‚Ä¢ Grandes playlists (200+): Tr√®s haute efficacit√© m√©moire")
    print("   ‚Ä¢ Tr√®s grandes playlists (1000+): Performance constante")

if __name__ == "__main__":
    print("üéµ TEST NOUVEAU SYST√àME CHARGEMENT PROGRESSIF")
    print("="*80)
    
    success1 = test_progressive_system_activation()
    success2 = test_initial_progressive_load()
    success3 = test_scroll_load_more()  
    success4 = test_no_unloading_ever()
    success5 = test_integration_with_controls()
    
    show_progressive_system_summary()
    
    if success1 and success2 and success3 and success4 and success5:
        print(f"\n{'='*80}")
        print("üéâ NOUVEAU SYST√àME PROGRESSIF ENTI√àREMENT FONCTIONNEL !")
        print("‚úÖ Activation et configuration OK")
        print("‚úÖ Chargement initial fonctionnel")
        print("‚úÖ Scroll load more op√©rationnel")
        print("‚úÖ Aucun d√©chargement confirm√©")
        print("‚úÖ Int√©gration contr√¥les valid√©e")
        print("üöÄ Le syst√®me progressif est pr√™t √† l'emploi !")
        print("üéµ Testez avec vos playlists !")
        print(f"{'='*80}")
    else:
        print(f"\n{'='*80}")
        print("‚ö†Ô∏è  Le syst√®me progressif n√©cessite des ajustements")
        print("üîß V√©rifiez les erreurs ci-dessus")
        print(f"{'='*80}")