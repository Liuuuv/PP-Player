#!/usr/bin/env python3
"""
Test R√âEL du syst√®me de chargement/d√©chargement automatique
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
parent_dir = os.path.dirname(os.path.abspath(__file__))
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

def test_corrected_system():
    """Test du syst√®me corrig√©"""
    print("=== Test du syst√®me corrig√© ===")
    
    try:
        from main import MusicPlayer
        from search_tab.config import update_main_playlist_config
        import tkinter as tk
        
        # Activer le debug pour voir tout ce qui se passe
        update_main_playlist_config(
            debug_scroll=True,
            enable_smart_loading=True,
            reload_on_song_change=True,
            auto_unload_unused=True
        )
        
        root = tk.Tk()
        root.withdraw()
        
        player = MusicPlayer(root)
        
        # Configuration de test avec une grande playlist
        player.main_playlist = [f"chanson_{i:03d}.mp3" for i in range(1, 201)]  # 200 chansons
        
        print(f"‚úì Playlist cr√©√©e: {len(player.main_playlist)} chansons")
        
        # Test des nouvelles fonctions am√©lior√©es
        functions_to_test = [
            '_smart_load_unload',
            '_trigger_smart_reload_on_song_change',
            '_force_reload_window',
            '_highlight_current_song_in_window'
        ]
        
        print(f"\n--- V√©rification des nouvelles fonctions ---")
        for func_name in functions_to_test:
            if hasattr(player, func_name):
                print(f"‚úÖ {func_name} : disponible")
            else:
                print(f"‚ùå {func_name} : manquante")
                return False
        
        # Test 1: Simulation changement de musique
        print(f"\n--- Test 1: Simulation changement de musique ---")
        player.current_index = 50
        print(f"  Position initiale: {player.current_index}")
        
        # Premier appel (initialisation)
        print(f"  üöÄ D√©clenchement initial...")
        player._trigger_smart_reload_on_song_change()
        
        # Changement vers autre position
        player.current_index = 100
        print(f"  Changement vers: {player.current_index}")
        print(f"  üéµ D√©clenchement changement...")
        player._trigger_smart_reload_on_song_change()
        
        # Test 2: V√©rification force reload
        print(f"\n--- Test 2: Test force reload direct ---")
        start_test = 80
        end_test = 101
        print(f"  üî• Force reload {start_test}-{end_test}...")
        player._force_reload_window(start_test, end_test)
        
        # Test 3: V√©rifier l'√©tat final
        print(f"\n--- Test 3: √âtat final ---")
        if hasattr(player, '_last_smart_reload_index'):
            print(f"  Derni√®re position trait√©e: {player._last_smart_reload_index}")
        
        if hasattr(player, '_last_window_start') and hasattr(player, '_last_window_end'):
            start = player._last_window_start
            end = player._last_window_end
            print(f"  Fen√™tre charg√©e: {start}-{end} ({end-start} √©l√©ments)")
            
            # Calculer l'efficacit√©
            loaded = end - start
            total = len(player.main_playlist)
            efficiency = (total - loaded) / total * 100
            print(f"  Efficacit√©: {efficiency:.1f}% d'√©conomie m√©moire")
            
        root.destroy()
        print("\n‚úÖ Test du syst√®me corrig√© r√©ussi !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur test syst√®me corrig√©: {e}")
        return False

def test_trigger_integration():
    """Test de l'int√©gration des d√©clencheurs dans les diff√©rents fichiers"""
    print("\n=== Test int√©gration des d√©clencheurs ===")
    
    try:
        # Test control.py
        import control
        import inspect
        
        functions_with_triggers = []
        functions_without_triggers = []
        
        # Fonctions √† v√©rifier dans control.py
        control_functions = ['prev_track', 'next_track', 'play_selected']
        
        for func_name in control_functions:
            if hasattr(control, func_name):
                source = inspect.getsource(getattr(control, func_name))
                if '_trigger_smart_reload_on_song_change' in source:
                    functions_with_triggers.append(f"control.{func_name}")
                else:
                    functions_without_triggers.append(f"control.{func_name}")
            else:
                functions_without_triggers.append(f"control.{func_name} (non trouv√©)")
        
        # Test tools.py
        import tools
        if hasattr(tools, 'play_track'):
            source = inspect.getsource(tools.play_track)
            if '_trigger_smart_reload_on_song_change' in source:
                functions_with_triggers.append("tools.play_track")
            else:
                functions_without_triggers.append("tools.play_track")
        else:
            functions_without_triggers.append("tools.play_track (non trouv√©)")
        
        print(f"‚úÖ Fonctions AVEC d√©clencheurs ({len(functions_with_triggers)}):")
        for func in functions_with_triggers:
            print(f"   - {func}")
            
        if functions_without_triggers:
            print(f"\n‚ùå Fonctions SANS d√©clencheurs ({len(functions_without_triggers)}):")
            for func in functions_without_triggers:
                print(f"   - {func}")
            return False
        else:
            print(f"\nüéâ Tous les d√©clencheurs sont en place !")
            return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur test d√©clencheurs: {e}")
        return False

def test_realistic_scenario():
    """Test d'un sc√©nario r√©aliste d'utilisation"""
    print("\n=== Test sc√©nario r√©aliste ===")
    
    try:
        from main import MusicPlayer
        from search_tab.config import update_main_playlist_config
        import tkinter as tk
        
        # Configuration
        update_main_playlist_config(
            debug_scroll=True,
            enable_smart_loading=True,
            reload_on_song_change=True,
            songs_before_current=10,
            songs_after_current=10
        )
        
        root = tk.Tk()
        root.withdraw()
        
        player = MusicPlayer(root)
        
        # Grosse playlist pour tester l'efficacit√©
        player.main_playlist = [f"mega_song_{i:04d}.mp3" for i in range(1, 1001)]  # 1000 chansons !
        
        print(f"‚úì MEGA playlist: {len(player.main_playlist)} chansons")
        
        # Sc√©nario : navigation dans la playlist
        positions_to_test = [
            ("D√©but", 5),
            ("Milieu", 500),
            ("Fin", 990),
            ("Retour d√©but", 20),
            ("Saut important", 800)
        ]
        
        for scenario_name, position in positions_to_test:
            print(f"\n--- Sc√©nario {scenario_name} (position {position}) ---")
            
            # Simuler navigation vers cette position
            player.current_index = position
            
            # D√©clencher le syst√®me
            player._trigger_smart_reload_on_song_change()
            
            # V√©rifier les r√©sultats
            if hasattr(player, '_last_window_start') and hasattr(player, '_last_window_end'):
                start = player._last_window_start
                end = player._last_window_end
                loaded = end - start
                
                print(f"  Fen√™tre charg√©e: {start}-{end}")
                print(f"  √âl√©ments charg√©s: {loaded}")
                print(f"  √âl√©ments NON charg√©s: {len(player.main_playlist) - loaded}")
                
                # V√©rifier que la chanson courante est bien incluse
                if start <= position < end:
                    print(f"  ‚úÖ Chanson courante ({position}) incluse")
                else:
                    print(f"  ‚ùå Chanson courante ({position}) exclue !")
                    
                # V√©rifier l'efficacit√©
                efficiency = (len(player.main_playlist) - loaded) / len(player.main_playlist) * 100
                if efficiency > 95:
                    print(f"  üåü Excellente efficacit√©: {efficiency:.1f}%")
                elif efficiency > 90:
                    print(f"  ‚úÖ Bonne efficacit√©: {efficiency:.1f}%")
                else:
                    print(f"  ‚ö†Ô∏è  Efficacit√© moyenne: {efficiency:.1f}%")
                    
        root.destroy()
        print("\n‚úÖ Test sc√©nario r√©aliste r√©ussi !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur sc√©nario r√©aliste: {e}")
        return False

def show_final_summary():
    """R√©sum√© final du syst√®me corrig√©"""
    print("\n" + "="*80)
    print("üéâ SYST√àME DE CHARGEMENT/D√âCHARGEMENT AUTOMATIQUE - CORRIG√â")
    print("="*80)
    
    print("\n‚úÖ CORRECTIONS APPORT√âES:")
    print("   1. ‚ùå 'playlist_size' non d√©finie ‚Üí ‚úÖ Variable d√©finie")
    print("   2. ‚ùå Syst√®me ne se d√©clenchait pas ‚Üí ‚úÖ D√©clencheurs ajout√©s partout")
    print("   3. ‚ùå D√©chargement pas r√©el ‚Üí ‚úÖ Force reload complet")
    print("   4. ‚ùå Logique trop complexe ‚Üí ‚úÖ Syst√®me simplifi√© et direct")
    
    print("\nüîß NOUVEAU SYST√àME:")
    print("   ‚Ä¢ _smart_load_unload() : Version R√âELLE, simple et efficace")
    print("   ‚Ä¢ _force_reload_window() : D√©charge TOUT puis recharge seulement la fen√™tre")
    print("   ‚Ä¢ _trigger_smart_reload_on_song_change() : D√©tection changement am√©lior√©e")
    print("   ‚Ä¢ _highlight_current_song_in_window() : Surbrillance correcte")
    
    print("\nüéØ D√âCLENCHEURS AJOUT√âS:")
    print("   ‚Ä¢ control.prev_track() ‚Üí smart reload")
    print("   ‚Ä¢ control.next_track() ‚Üí smart reload")  
    print("   ‚Ä¢ control.play_selected() ‚Üí smart reload")
    print("   ‚Ä¢ tools.play_track() ‚Üí smart reload")
    print("   ‚Ä¢ Plus tous les d√©clencheurs existants dans main_playlist.py")
    
    print("\n‚ö° R√âSULTAT:")
    print("   ‚Ä¢ Chargement R√âEL 10+1+10 √† chaque changement")
    print("   ‚Ä¢ D√©chargement R√âEL de tous les autres √©l√©ments")
    print("   ‚Ä¢ Performance optimis√©e (95%+ d'√©conomie m√©moire)")
    print("   ‚Ä¢ D√©clenchement automatique garanti")
    print("   ‚Ä¢ Debug complet pour voir ce qui se passe")
    
    print("\nüéÆ EXP√âRIENCE UTILISATEUR:")
    print("   üéµ Change de musique ‚Üí Rechargement automatique visible")
    print("   üñ±Ô∏è Clique sur une musique ‚Üí Rechargement imm√©diat")  
    print("   ‚è≠Ô∏è Boutons suivant/pr√©c√©dent ‚Üí Rechargement automatique")
    print("   üíæ Grande playlist ‚Üí Seulement ~21 √©l√©ments en m√©moire")
    print("   ‚ö° Performance constante m√™me avec 1000+ musiques")

if __name__ == "__main__":
    print("üîß TEST R√âEL DU SYST√àME CORRIG√â")
    print("="*80)
    
    success1 = test_corrected_system()
    success2 = test_trigger_integration()  
    success3 = test_realistic_scenario()
    
    show_final_summary()
    
    if success1 and success2 and success3:
        print(f"\n{'='*80}")
        print("üéâ SYST√àME COMPL√àTEMENT CORRIG√â ET FONCTIONNEL !")
        print("‚úÖ Erreur playlist_size corrig√©e")
        print("‚úÖ Syst√®me de chargement/d√©chargement R√âEL")
        print("‚úÖ D√©clencheurs int√©gr√©s partout")
        print("‚úÖ Tests r√©alistes valid√©s")
        print("üöÄ Le syst√®me fonctionne maintenant automatiquement !")
        print("üéµ Testez : changez de musique et voyez le debug !")
        print(f"{'='*80}")
    else:
        print(f"\n{'='*80}")
        print("‚ö†Ô∏è  Il reste des probl√®mes √† corriger")
        print("üîß V√©rifiez les erreurs ci-dessus")
        print(f"{'='*80}")