#!/usr/bin/env python3
"""
Test des nouvelles fonctionnalit√©s : logs et t√©l√©chargement s√©quentiel
"""

import os
import sys
import time

def test_imports():
    """Test que tous les modules s'importent correctement"""
    print("üß™ Test des imports...")
    
    try:
        import inputs
        print("‚úÖ inputs.py import√©")
        
        import import_logger
        print("‚úÖ import_logger.py import√©")
        
        import logs_viewer
        print("‚úÖ logs_viewer.py import√©")
        
        import extract_from_html
        print("‚úÖ extract_from_html.py import√©")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False

def test_logger():
    """Test du syst√®me de logs"""
    print("\nüß™ Test du syst√®me de logs...")
    
    try:
        from import_logger import get_import_logger
        
        # Cr√©er un logger de test
        logger = get_import_logger(".")
        
        # D√©marrer une session de test
        session_id = logger.start_session('TEST', 'test_file.html')
        print(f"‚úÖ Session cr√©√©e: {session_id}")
        
        # Ajouter quelques logs
        logger.set_total_links(5)
        logger.log_info("Test d'information")
        logger.log_warning("Test d'avertissement")
        logger.log_error("Test d'erreur")
        logger.log_success("Test de succ√®s")
        
        # Simuler le traitement d'URLs
        logger.log_url_processed("https://youtube.com/test1", "Test Video 1", "success")
        logger.log_url_processed("https://youtube.com/test2", "Test Video 2", "failed", "Erreur de test")
        logger.log_url_processed("https://youtube.com/test3", "Test Video 3", "skipped", "Dur√©e trop longue")
        
        # Terminer la session
        logger.end_session('completed')
        print("‚úÖ Session termin√©e")
        
        # V√©rifier que le fichier de logs existe
        logs_dir = os.path.join(".", "import_logs")
        if os.path.exists(logs_dir):
            log_files = [f for f in os.listdir(logs_dir) if f.endswith('.json')]
            if log_files:
                print(f"‚úÖ Fichier de logs cr√©√©: {log_files[-1]}")
            else:
                print("‚ö†Ô∏è Aucun fichier de logs trouv√©")
        else:
            print("‚ö†Ô∏è Dossier de logs non cr√©√©")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur test logger: {e}")
        return False

def test_html_extraction():
    """Test de l'extraction HTML"""
    print("\nüß™ Test de l'extraction HTML...")
    
    try:
        import extract_from_html
        
        # Cr√©er un fichier HTML de test
        test_html = """
        <html>
        <body>
            <a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ">Test Video 1</a>
            <a href="https://youtu.be/9bZkp7q19f0">Test Video 2</a>
            <a href="https://music.youtube.com/watch?v=kJQP7kiw5Fk">Test Video 3</a>
        </body>
        </html>
        """
        
        test_file = "test_extraction.html"
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_html)
        
        # Extraire les liens
        links = extract_from_html.extract_youtube_links_from_html(test_file)
        
        if len(links) == 3:
            print(f"‚úÖ Extraction r√©ussie: {len(links)} liens trouv√©s")
            for link in links:
                print(f"  - {link}")
        else:
            print(f"‚ö†Ô∏è Nombre de liens inattendu: {len(links)} (attendu: 3)")
        
        # Nettoyer
        os.remove(test_file)
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur test extraction: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ Test des nouvelles fonctionnalit√©s")
    print("=" * 50)
    
    tests_passed = 0
    total_tests = 3
    
    # Test 1: Imports
    if test_imports():
        tests_passed += 1
    
    # Test 2: Logger
    if test_logger():
        tests_passed += 1
    
    # Test 3: Extraction HTML
    if test_html_extraction():
        tests_passed += 1
    
    # R√©sultats
    print("\n" + "=" * 50)
    print(f"üìä R√©sultats: {tests_passed}/{total_tests} tests r√©ussis")
    
    if tests_passed == total_tests:
        print("üéâ Tous les tests sont pass√©s ! Les nouvelles fonctionnalit√©s sont pr√™tes.")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
    
    return tests_passed == total_tests

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)