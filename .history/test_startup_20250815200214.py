#!/usr/bin/env python3
"""
Script de test pour v√©rifier que l'application d√©marre sans erreur
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
parent_dir = os.path.dirname(os.path.abspath(__file__))
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

def test_imports():
    """Test des imports principaux"""
    print("Test des imports...")
    
    try:
        # Test des imports de base
        import tkinter as tk
        print("‚úì tkinter import√©")
        
        import pygame
        print("‚úì pygame import√©")
        
        # Test des imports du projet
        from main import MusicPlayer
        print("‚úì MusicPlayer import√©")
        
        import search_tab.main_playlist
        print("‚úì search_tab.main_playlist import√©")
        
        import library_tab.downloads
        print("‚úì library_tab.downloads import√©")
        
        print("\n‚úÖ Tous les imports sont OK !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur d'import: {e}")
        return False

def test_methods():
    """Test de l'existence des m√©thodes optimis√©es"""
    print("\nTest des m√©thodes optimis√©es...")
    
    try:
        from main import MusicPlayer
        import tkinter as tk
        
        # Cr√©er une instance temporaire pour tester
        root = tk.Tk()
        root.withdraw()  # Cacher la fen√™tre
        
        player = MusicPlayer(root)
        
        # V√©rifier que les nouvelles m√©thodes existent
        methods_to_check = [
            '_disable_play_buttons',
            '_enable_play_buttons', 
            '_refresh_main_playlist_display_async'
        ]
        
        for method_name in methods_to_check:
            if hasattr(player, method_name):
                print(f"‚úì {method_name} existe")
            else:
                print(f"‚ùå {method_name} manquante")
                return False
        
        root.destroy()
        print("\n‚úÖ Toutes les m√©thodes optimis√©es sont pr√©sentes !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test des m√©thodes: {e}")
        return False

if __name__ == "__main__":
    print("=== Test de d√©marrage de l'application ===")
    
    success = True
    success &= test_imports()
    success &= test_methods()
    
    if success:
        print("\nüéâ L'application est pr√™te √† √™tre utilis√©e avec les optimisations !")
        print("\nPour tester les optimisations:")
        print("1. Lancez l'application normalement")
        print("2. Allez dans l'onglet Biblioth√®que")
        print("3. Cliquez sur 'Jouer toutes les musiques' avec 50+ musiques")
        print("4. Observez la fluidit√© am√©lior√©e !")
    else:
        print("\n‚ö†Ô∏è  Il y a des probl√®mes √† corriger avant d'utiliser l'application.")