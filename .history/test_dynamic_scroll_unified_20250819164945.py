#!/usr/bin/env python3
"""
Test du syst√®me de scroll dynamique unifi√©
V√©rifie que l'unification des syst√®mes infinite_scroll et progressive_scroll fonctionne
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
parent_dir = os.path.dirname(os.path.abspath(__file__))
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

def test_config_unification():
    """Test que la configuration utilise bien le nouveau syst√®me unifi√©"""
    print("üß™ TEST: Configuration du syst√®me unifi√©")
    
    try:
        from search_tab.config import get_main_playlist_config
        
        # V√©rifier que le nouveau param√®tre existe
        dynamic_scroll = get_main_playlist_config('enable_dynamic_scroll')
        print(f"‚úÖ enable_dynamic_scroll: {dynamic_scroll}")
        
        # V√©rifier que les anciens param√®tres n'existent plus ou sont remplac√©s
        try:
            infinite_scroll = get_main_playlist_config('enable_infinite_scroll')
            print(f"‚ö†Ô∏è enable_infinite_scroll encore pr√©sent: {infinite_scroll}")
        except:
            print("‚úÖ enable_infinite_scroll supprim√©")
            
        try:
            progressive_loading = get_main_playlist_config('enable_progressive_loading')
            print(f"‚ö†Ô∏è enable_progressive_loading encore pr√©sent: {progressive_loading}")
        except:
            print("‚úÖ enable_progressive_loading supprim√©")
        
        # V√©rifier les autres param√®tres du scroll dynamique
        scroll_threshold = get_main_playlist_config('scroll_threshold')
        load_more_count = get_main_playlist_config('load_more_count')
        initial_load = get_main_playlist_config('initial_load_after_current')
        trigger_threshold = get_main_playlist_config('scroll_trigger_threshold')
        
        print(f"‚úÖ scroll_threshold: {scroll_threshold}")
        print(f"‚úÖ load_more_count: {load_more_count}")
        print(f"‚úÖ initial_load_after_current: {initial_load}")
        print(f"‚úÖ scroll_trigger_threshold: {trigger_threshold}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test configuration: {e}")
        return False

def test_functions_unification():
    """Test que les nouvelles fonctions existent"""
    print("\nüß™ TEST: Fonctions du syst√®me unifi√©")
    
    try:
        import tkinter as tk
        from main import MusicPlayer
        
        # Cr√©er une instance de test
        root = tk.Tk()
        root.withdraw()  # Cacher la fen√™tre
        player = MusicPlayer(root)
        
        # V√©rifier que les nouvelles fonctions existent
        functions_to_check = [
            '_setup_dynamic_scroll',
            '_on_dynamic_scroll'
        ]
        
        for func_name in functions_to_check:
            if hasattr(player, func_name):
                print(f"‚úÖ {func_name}: fonction disponible")
            else:
                print(f"‚ùå {func_name}: fonction manquante")
        
        # V√©rifier que les anciennes fonctions sont toujours l√† pour compatibilit√©
        legacy_functions = [
            '_setup_infinite_scroll',  # Devrait rediriger vers dynamic_scroll
            '_setup_progressive_scroll_detection'
        ]
        
        for func_name in legacy_functions:
            if hasattr(player, func_name):
                print(f"üîÑ {func_name}: fonction de compatibilit√© disponible")
            else:
                print(f"‚ö†Ô∏è {func_name}: fonction de compatibilit√© manquante")
        
        root.destroy()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test fonctions: {e}")
        return False

def test_integration():
    """Test d'int√©gration simple"""
    print("\nüß™ TEST: Int√©gration du syst√®me unifi√©")
    
    try:
        import tkinter as tk
        from main import MusicPlayer
        from search_tab.config import get_main_playlist_config
        
        # Cr√©er une instance de test
        root = tk.Tk()
        root.withdraw()
        player = MusicPlayer(root)
        
        # Simuler une playlist
        player.main_playlist = [f"track_{i:03d}.mp3" for i in range(1, 101)]  # 100 pistes
        player.current_index = 50
        
        # Tester la configuration du scroll dynamique
        try:
            player._setup_dynamic_scroll()
            print("‚úÖ Configuration du scroll dynamique r√©ussie")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur configuration: {type(e).__name__}")
        
        # Tester l'appel du scroll dynamique
        try:
            player._on_dynamic_scroll()
            print("‚úÖ Appel du scroll dynamique r√©ussi")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur appel scroll: {type(e).__name__}")
        
        root.destroy()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test int√©gration: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üéØ TEST DU SYST√àME DE SCROLL DYNAMIQUE UNIFI√â")
    print("=" * 60)
    
    # Tests
    config_ok = test_config_unification()
    functions_ok = test_functions_unification()
    integration_ok = test_integration()
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS:")
    print(f"   ‚Ä¢ Configuration: {'‚úÖ OK' if config_ok else '‚ùå √âCHEC'}")
    print(f"   ‚Ä¢ Fonctions: {'‚úÖ OK' if functions_ok else '‚ùå √âCHEC'}")
    print(f"   ‚Ä¢ Int√©gration: {'‚úÖ OK' if integration_ok else '‚ùå √âCHEC'}")
    
    if all([config_ok, functions_ok, integration_ok]):
        print("\nüéâ TOUS LES TESTS R√âUSSIS!")
        print("‚úÖ Le syst√®me de scroll dynamique unifi√© est op√©rationnel")
    else:
        print("\n‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â")
        print("üîß V√©rifiez les erreurs ci-dessus")
    
    print("\nüìã CHANGEMENTS EFFECTU√âS:")
    print("   ‚Ä¢ enable_infinite_scroll + enable_progressive_loading ‚Üí enable_dynamic_scroll")
    print("   ‚Ä¢ _setup_infinite_scroll + _setup_progressive_scroll_detection ‚Üí _setup_dynamic_scroll")
    print("   ‚Ä¢ _on_progressive_scroll ‚Üí _on_dynamic_scroll")
    print("   ‚Ä¢ Fonctions de compatibilit√© maintenues pour la transition")
    
    print("\nüéÆ UTILISATION:")
    print("   ‚Ä¢ Un seul param√®tre: enable_dynamic_scroll")
    print("   ‚Ä¢ Une seule fonction de setup: _setup_dynamic_scroll()")
    print("   ‚Ä¢ Une seule fonction de gestion: _on_dynamic_scroll()")
    print("   ‚Ä¢ Combine les fonctionnalit√©s des deux anciens syst√®mes")

if __name__ == "__main__":
    main()