#!/usr/bin/env python3
"""
Test du syst√®me d'affichage automatique 10+1+10 corrig√©
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
parent_dir = os.path.dirname(os.path.abspath(__file__))
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

def test_removed_indicators():
    """V√©rifie que les indicateurs '...XXX musiques suivantes' sont supprim√©s"""
    print("=== Test suppression des indicateurs ===")
    
    try:
        from search_tab.main_playlist import _refresh_windowed_playlist_display
        import inspect
        
        # Examiner le code source pour voir si les indicateurs sont supprim√©s
        source = inspect.getsource(_refresh_windowed_playlist_display)
        
        if "musiques suivantes" in source:
            print("‚ùå Les indicateurs 'musiques suivantes' sont encore pr√©sents")
            return False
        elif "musiques pr√©c√©dentes" in source:
            print("‚ùå Les indicateurs 'musiques pr√©c√©dentes' sont encore pr√©sents")
            return False
        else:
            print("‚úÖ Les indicateurs ont √©t√© supprim√©s du code")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

def test_smart_loading_integration():
    """Test de l'int√©gration du chargement intelligent"""
    print("\n=== Test int√©gration chargement intelligent ===")
    
    try:
        from main import MusicPlayer
        from search_tab.config import update_main_playlist_config
        import tkinter as tk
        
        # Activer le debug et le syst√®me intelligent
        update_main_playlist_config(
            debug_scroll=True,
            enable_smart_loading=True,
            reload_on_song_change=True
        )
        
        root = tk.Tk()
        root.withdraw()
        
        player = MusicPlayer(root)
        
        # Configuration de test
        player.main_playlist = [f"test_{i:03d}.mp3" for i in range(1, 101)]  # 100 musiques
        player.current_index = 25
        
        print(f"‚úì Playlist test: {len(player.main_playlist)} musiques")
        print(f"‚úì Position courante: {player.current_index}")
        
        # Test 1: Calcul de fen√™tre intelligente
        print("\n--- Test 1: Calcul fen√™tre intelligente ---")
        start, end = player._calculate_smart_window()
        if start is not None and end is not None:
            print(f"  Fen√™tre calcul√©e: {start}-{end} ({end-start} √©l√©ments)")
            
            # V√©rifier que la chanson courante est incluse
            if start <= player.current_index < end:
                print(f"  ‚úÖ Chanson courante ({player.current_index}) incluse")
            else:
                print(f"  ‚ùå Chanson courante ({player.current_index}) exclue")
                
            # V√©rifier que c'est bien ~21 √©l√©ments (10+1+10)
            window_size = end - start
            if 15 <= window_size <= 30:
                print(f"  ‚úÖ Taille raisonnable: {window_size} √©l√©ments")
            else:
                print(f"  ‚ö†Ô∏è  Taille inhabituelle: {window_size} √©l√©ments")
                
        else:
            print("  ‚ùå Calcul √©chou√©")
            return False
        
        # Test 2: Simulation changement de musique
        print("\n--- Test 2: Simulation changement musique ---")
        old_index = player.current_index
        player.current_index = 50  # Changer vers milieu
        
        print(f"  Changement: {old_index} ‚Üí {player.current_index}")
        
        # D√©clencher le syst√®me
        player._trigger_smart_reload_on_song_change()
        
        # V√©rifier nouvelle fen√™tre
        new_start, new_end = player._calculate_smart_window()
        print(f"  Nouvelle fen√™tre: {new_start}-{new_end}")
        
        if new_start <= player.current_index < new_end:
            print(f"  ‚úÖ Nouvelle position ({player.current_index}) incluse")
        else:
            print(f"  ‚ùå Nouvelle position ({player.current_index}) exclue")
        
        # Test 3: Test des d√©clencheurs dans control.py
        print("\n--- Test 3: V√©rification d√©clencheurs control.py ---")
        
        import control
        import inspect
        
        # V√©rifier que les fonctions contiennent les d√©clencheurs
        functions_to_check = ['prev_track', 'next_track', 'play_selected']
        
        for func_name in functions_to_check:
            if hasattr(control, func_name):
                source = inspect.getsource(getattr(control, func_name))
                if '_trigger_smart_reload_on_song_change' in source:
                    print(f"  ‚úÖ D√©clencheur ajout√© dans {func_name}")
                else:
                    print(f"  ‚ùå D√©clencheur manquant dans {func_name}")
            else:
                print(f"  ‚ö†Ô∏è  Fonction {func_name} non trouv√©e")
        
        root.destroy()
        print("\n‚úÖ Test int√©gration r√©ussi !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test int√©gration: {e}")
        return False

def test_automatic_loading_scenario():
    """Test d'un sc√©nario complet de chargement automatique"""
    print("\n=== Test sc√©nario complet automatique ===")
    
    try:
        from main import MusicPlayer
        from search_tab.config import update_main_playlist_config
        import tkinter as tk
        
        # Configuration agressive pour voir les r√©sultats
        update_main_playlist_config(
            debug_scroll=True,
            enable_smart_loading=True,
            auto_unload_unused=True,
            reload_on_song_change=True,
            songs_before_current=10,
            songs_after_current=10
        )
        
        root = tk.Tk()
        root.withdraw()
        
        player = MusicPlayer(root)
        
        # Grande playlist pour tester l'effet
        player.main_playlist = [f"huge_{i:04d}.mp3" for i in range(1, 501)]  # 500 musiques
        
        scenarios = [
            {"name": "D√©but", "index": 10},
            {"name": "Milieu", "index": 250}, 
            {"name": "Fin", "index": 480},
            {"name": "Tr√®s d√©but", "index": 2},
            {"name": "Tr√®s fin", "index": 495}
        ]
        
        for scenario in scenarios:
            print(f"\n--- Sc√©nario {scenario['name']} (position {scenario['index']}) ---")
            
            # Changer vers cette position
            player.current_index = scenario['index']
            
            # Calculer la fen√™tre optimale
            start, end = player._calculate_smart_window()
            
            if start is not None and end is not None:
                window_size = end - start
                print(f"  Fen√™tre: {start}-{end} ({window_size} √©l√©ments)")
                print(f"  Musiques non charg√©es: {len(player.main_playlist) - window_size}")
                
                # V√©rifier l'efficacit√©
                efficiency = (len(player.main_playlist) - window_size) / len(player.main_playlist) * 100
                print(f"  Efficacit√© m√©moire: {efficiency:.1f}% d'√©conomie")
                
                if efficiency > 80:
                    print(f"  ‚úÖ Excellente optimisation")
                elif efficiency > 60:
                    print(f"  ‚úÖ Bonne optimisation")
                else:
                    print(f"  ‚ö†Ô∏è  Optimisation faible")
                    
                # V√©rifier la protection de la chanson courante
                if start <= scenario['index'] < end:
                    print(f"  ‚úÖ Chanson courante prot√©g√©e")
                else:
                    print(f"  ‚ùå Chanson courante non prot√©g√©e !")
                    
            else:
                print(f"  ‚ùå Calcul √©chou√©")
        
        root.destroy()
        print("\n‚úÖ Test sc√©nario complet r√©ussi !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur sc√©nario complet: {e}")
        return False

def show_corrections_summary():
    """Affiche le r√©sum√© des corrections apport√©es"""
    print("\n" + "="*80)
    print("üîß CORRECTIONS APPORT√âES AU SYST√àME")
    print("="*80)
    
    print("\n‚úÖ PROBL√àME 1 CORRIG√â: Indicateurs supprim√©s")
    print("   ‚ùå Avant: '...XXX musiques suivantes' et '...XXX musiques pr√©c√©dentes'")  
    print("   ‚úÖ Apr√®s: Affichage propre sans indicateurs")
    
    print("\n‚úÖ PROBL√àME 2 CORRIG√â: Chargement/d√©chargement automatique")
    print("   ‚ùå Avant: Syst√®me pas d√©clench√© automatiquement")
    print("   ‚úÖ Apr√®s: D√©clencheurs ajout√©s dans toutes les fonctions de changement")
    
    print("\nüîß MODIFICATIONS APPORT√âES:")
    print("   1. Suppression des indicateurs dans _refresh_windowed_playlist_display()")
    print("   2. Int√©gration du syst√®me intelligent dans le rafra√Æchissement")
    print("   3. D√©clencheurs ajout√©s dans control.py:")
    print("      - prev_track() ‚Üí _trigger_smart_reload_on_song_change()")
    print("      - next_track() ‚Üí _trigger_smart_reload_on_song_change()")
    print("      - play_selected() ‚Üí _trigger_smart_reload_on_song_change()")
    print("   4. Force l'ex√©cution imm√©diate dans setup_scroll()")
    
    print("\nüéØ R√âSULTAT ATTENDU:")
    print("   ‚Ä¢ Affichage propre sans '...XXX musiques suivantes'")
    print("   ‚Ä¢ Chargement automatique 10+1+10 √† chaque changement")
    print("   ‚Ä¢ D√©chargement intelligent des √©l√©ments inutiles")
    print("   ‚Ä¢ Performance optimis√©e avec grandes playlists")

if __name__ == "__main__":
    print("üîß TEST DES CORRECTIONS DU SYST√àME D'AFFICHAGE")
    print("="*80)
    
    success1 = test_removed_indicators()
    success2 = test_smart_loading_integration()
    success3 = test_automatic_loading_scenario()
    
    show_corrections_summary()
    
    if success1 and success2 and success3:
        print(f"\n{'='*80}")
        print("üéâ TOUTES LES CORRECTIONS VALID√âES !")
        print("‚úÖ Indicateurs supprim√©s")
        print("‚úÖ Chargement/d√©chargement automatique fonctionnel")
        print("‚úÖ D√©clencheurs int√©gr√©s")
        print("‚úÖ Sc√©narios de test r√©ussis")
        print("üöÄ Le syst√®me corrig√© est pr√™t √† l'emploi !")
        print(f"{'='*80}")
    else:
        print(f"\n{'='*80}")
        print("‚ö†Ô∏è  Certaines corrections peuvent n√©cessiter des ajustements")
        print("üîß V√©rifiez les erreurs ci-dessus")
        print(f"{'='*80}")