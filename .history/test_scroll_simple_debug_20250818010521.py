#!/usr/bin/env python3
"""
Test simple pour v√©rifier la configuration du scroll avec debug
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
parent_dir = os.path.dirname(os.path.abspath(__file__))
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

def test_scroll_configuration():
    """Test de la configuration du scroll"""
    print("=== Test de la configuration du scroll ===")
    
    try:
        from search_tab.config import get_main_playlist_config, update_main_playlist_config
        
        # Activer le debug
        update_main_playlist_config(debug_scroll=True, debug_windowing=True)
        
        print("‚úÖ DEBUG: Configuration mise √† jour")
        print(f"   - Debug scroll: {get_main_playlist_config('debug_scroll')}")
        print(f"   - Debug windowing: {get_main_playlist_config('debug_windowing')}")
        print(f"   - Scroll infini: {get_main_playlist_config('enable_infinite_scroll')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå DEBUG: Erreur configuration: {e}")
        return False

def test_function_imports():
    """Test des imports de fonctions"""
    print("\n=== Test des imports de fonctions ===")
    
    try:
        from main import MusicPlayer
        import tkinter as tk
        
        # Cr√©er une instance minimale
        root = tk.Tk()
        root.withdraw()  # Cacher la fen√™tre
        
        player = MusicPlayer(root)
        
        # Tester les fonctions une par une
        functions_to_test = [
            ('_setup_infinite_scroll', 'Configuration scroll infini'),
            ('_update_display_based_on_scroll_position', 'Synchronisation scroll'),
            ('_update_windowed_display', 'Mise √† jour fen√™tre'),
            ('_on_scroll_with_update', 'Gestion scroll avec mise √† jour'),
        ]
        
        for func_name, description in functions_to_test:
            if hasattr(player, func_name):
                print(f"‚úÖ DEBUG: {description} ({func_name}) - disponible")
                
                # Test d'appel simple
                try:
                    func = getattr(player, func_name)
                    if func_name == '_setup_infinite_scroll':
                        func()
                        print(f"   ‚Üí Ex√©cution r√©ussie")
                    elif func_name == '_update_display_based_on_scroll_position':
                        # Simuler une playlist
                        player.main_playlist = ['test1.mp3', 'test2.mp3', 'test3.mp3']
                        func()
                        print(f"   ‚Üí Ex√©cution r√©ussie")
                    else:
                        print(f"   ‚Üí Fonction disponible (test d'ex√©cution non fait)")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Erreur ex√©cution: {type(e).__name__}")
            else:
                print(f"‚ùå DEBUG: {description} ({func_name}) - manquante")
        
        root.destroy()
        return True
        
    except Exception as e:
        print(f"‚ùå DEBUG: Erreur imports: {e}")
        return False

def test_binding_detection():
    """Test de d√©tection des bindings"""
    print("\n=== Test de d√©tection des bindings ===")
    
    try:
        from main import MusicPlayer
        import tkinter as tk
        
        root = tk.Tk()
        root.withdraw()
        
        player = MusicPlayer(root)
        
        # V√©rifier les attributs n√©cessaires
        attributes_to_check = [
            ('playlist_canvas', 'Canvas de playlist'),
            ('playlist_scrollbar', 'Scrollbar de playlist'),
            ('playlist_container', 'Container de playlist'),
        ]
        
        for attr_name, description in attributes_to_check:
            if hasattr(player, attr_name):
                attr_value = getattr(player, attr_name)
                if attr_value:
                    print(f"‚úÖ DEBUG: {description} ({attr_name}) - trouv√©: {type(attr_value)}")
                else:
                    print(f"‚ö†Ô∏è DEBUG: {description} ({attr_name}) - None")
            else:
                print(f"‚ùå DEBUG: {description} ({attr_name}) - manquant")
        
        # Test de la fonction _bind_mousewheel
        if hasattr(player, '_bind_mousewheel'):
            print("‚úÖ DEBUG: Fonction _bind_mousewheel disponible")
        else:
            print("‚ùå DEBUG: Fonction _bind_mousewheel manquante")
        
        # Test de la fonction _on_mousewheel
        if hasattr(player, '_on_mousewheel'):
            print("‚úÖ DEBUG: Fonction _on_mousewheel disponible")
        else:
            print("‚ùå DEBUG: Fonction _on_mousewheel manquante")
        
        root.destroy()
        return True
        
    except Exception as e:
        print(f"‚ùå DEBUG: Erreur d√©tection bindings: {e}")
        return False

def show_debug_summary():
    """Affiche un r√©sum√© des points √† v√©rifier"""
    print("\n" + "="*60)
    print("üîç R√âSUM√â DU DEBUG - POINTS √Ä V√âRIFIER")
    print("="*60)
    
    print("\nüéØ PROBL√àME ACTUEL:")
    print("   ‚Ä¢ La barre de scroll scroll mais les musiques ne d√©filent pas")
    print("   ‚Ä¢ Les messages de debug nous aideront √† identifier o√π √ßa bloque")
    
    print("\nüîß POINTS √Ä V√âRIFIER DANS L'APPLICATION:")
    print("   1. Les messages 'üñ±Ô∏è DEBUG: Scroll d√©tect√© sur playlist_canvas' s'affichent-ils ?")
    print("   2. Les messages 'üîÑ DEBUG: _update_display_based_on_scroll_position()' s'affichent-ils ?")
    print("   3. Les messages 'üîÑ DEBUG: _update_windowed_display()' s'affichent-ils ?")
    print("   4. Y a-t-il des erreurs dans les messages de debug ?")
    
    print("\nüö® SI AUCUN MESSAGE DE DEBUG NE S'AFFICHE:")
    print("   ‚Üí Le probl√®me est dans les bindings (scroll pas d√©tect√©)")
    print("   ‚Üí V√©rifier _bind_mousewheel et _on_mousewheel")
    
    print("\nüö® SI LES MESSAGES S'AFFICHENT MAIS PAS DE CHANGEMENT VISUEL:")
    print("   ‚Üí Le probl√®me est dans _update_windowed_display")
    print("   ‚Üí V√©rifier la destruction/cr√©ation des √©l√©ments")
    
    print("\nüö® SI LES MESSAGES D'ERREUR S'AFFICHENT:")
    print("   ‚Üí Lire les tracebacks pour identifier le probl√®me exact")
    
    print("\nüéÆ PROCHAINES √âTAPES:")
    print("   1. Lancez l'application normale")
    print("   2. Allez dans l'onglet Recherche")
    print("   3. Scrollez avec la molette dans la playlist")
    print("   4. Observez les messages de debug dans la console")
    print("   5. Rapportez ce que vous voyez")

if __name__ == "__main__":
    print("üîç TEST SIMPLE DE DEBUG DU SCROLL")
    print("="*60)
    
    success1 = test_scroll_configuration()
    success2 = test_function_imports()
    success3 = test_binding_detection()
    
    show_debug_summary()
    
    if success1 and success2 and success3:
        print(f"\n{'='*60}")
        print("‚úÖ CONFIGURATION DE DEBUG PR√äTE !")
        print("üîç Lancez maintenant l'application et testez le scroll")
        print("üìã Observez les messages de debug pour diagnostiquer")
        print(f"{'='*60}")
    else:
        print(f"\n{'='*60}")
        print("‚ö†Ô∏è Il y a des probl√®mes avec la configuration de debug")
        print(f"{'='*60}")