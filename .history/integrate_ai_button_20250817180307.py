"""
Script d'int√©gration pour ajouter le bouton IA √† l'interface existante
√Ä utiliser pour modifier votre fichier principal
"""

def integrate_ai_button_to_main_app():
    """
    Instructions pour int√©grer le bouton IA dans votre application principale
    """
    
    integration_code = '''
# ========== INT√âGRATION DU BOUTON IA ==========
# √Ä ajouter dans votre fichier principal (main.py ou √©quivalent)

# 1. IMPORTS (√† ajouter au d√©but du fichier)
try:
    from ai_menu_system import setup_ai_menu_system
    AI_MENU_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è Syst√®me de menu IA non disponible")
    AI_MENU_AVAILABLE = False

# 2. DANS __INIT__ DE VOTRE CLASSE PRINCIPALE (apr√®s l'initialisation de l'interface)
def __init__(self):
    # ... votre code d'initialisation existant ...
    
    # Initialiser le syst√®me de menu IA
    if AI_MENU_AVAILABLE:
        try:
            self.ai_menu_system = setup_ai_menu_system(self)
            print("ü§ñ Syst√®me de menu IA initialis√©")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur initialisation menu IA: {e}")
            self.ai_menu_system = None
    else:
        self.ai_menu_system = None

# 3. MODIFICATION DE LA CR√âATION DES BOUTONS DE CONTR√îLE
# Trouvez o√π vous cr√©ez les boutons comme auto_scroll et ajoutez le bouton IA

def create_control_buttons(self, parent_frame):
    """Exemple de cr√©ation des boutons de contr√¥le avec le bouton IA"""
    
    # ... vos boutons existants ...
    
    # Bouton IA (√† placer √† gauche du bouton auto_scroll)
    if self.ai_menu_system:
        self.ai_button = self.ai_menu_system.create_ai_button(parent_frame)
        if self.ai_button:
            self.ai_button.pack(side=tk.LEFT, padx=2)
    
    # Bouton auto_scroll (votre code existant)
    # self.auto_scroll_button = tk.Button(...)
    # self.auto_scroll_button.pack(side=tk.LEFT, padx=2)

# 4. INT√âGRATION AVEC LE SYST√àME DE RECOMMANDATION EXISTANT
# Si vous avez un syst√®me de recommandation, modifiez-le pour utiliser l'IA

def get_recommendations_with_ai(self, video_id):
    """Version am√©lior√©e qui utilise l'IA si activ√©e"""
    
    # Obtenir les recommandations normales
    recommendations = self.get_recommendations_for_video(video_id)  # votre m√©thode existante
    
    # Si l'IA est activ√©e pour les recommandations personnalis√©es
    if (self.ai_menu_system and 
        self.ai_menu_system.is_recommendations_enabled() and 
        recommendations):
        
        try:
            # Utiliser l'IA pour s√©lectionner les meilleures recommandations
            # Pour l'instant, on garde l'ordre original mais on pourrait am√©liorer
            print("ü§ñ S√©lection IA des recommandations activ√©e")
            
            # TODO: Impl√©menter la s√©lection IA bas√©e sur les m√©tadonn√©es
            # des recommandations et les pr√©f√©rences apprises
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur s√©lection IA: {e}")
    
    return recommendations

# 5. INT√âGRATION AVEC LE TRACKING DES ACTIONS UTILISATEUR
# Modifiez vos m√©thodes existantes pour notifier l'IA

def play_track(self):
    """Version modifi√©e qui notifie l'IA"""
    
    # Votre code existant
    # ... code de lecture de la chanson ...
    
    # Notifier l'IA si l'apprentissage est activ√©
    if (self.ai_menu_system and 
        self.ai_menu_system.is_learning_enabled() and
        hasattr(self.ai_menu_system, 'ai_integration_manager')):
        
        try:
            # L'int√©gration IA se fait automatiquement via ai_integration.py
            # Pas besoin de code suppl√©mentaire ici
            pass
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur notification IA: {e}")

def next_track(self):
    """Version modifi√©e qui d√©tecte les skips pour l'IA"""
    
    # Votre code existant
    # ... code de passage √† la chanson suivante ...
    
    # L'IA d√©tecte automatiquement les skips via l'int√©gration
    # Pas besoin de code suppl√©mentaire

# 6. M√âTHODES UTILITAIRES POUR L'IA (optionnel)

def show_ai_status(self):
    """Affiche le statut de l'IA dans la barre de statut"""
    if self.ai_menu_system:
        learning = "‚úÖ" if self.ai_menu_system.is_learning_enabled() else "‚ùå"
        recommendations = "‚úÖ" if self.ai_menu_system.is_recommendations_enabled() else "‚ùå"
        
        status_text = f"IA: Learning {learning} | Recommendations {recommendations}"
        self.status_bar.config(text=status_text)
    else:
        self.status_bar.config(text="IA non disponible")

# 7. RACCOURCIS CLAVIER POUR L'IA (optionnel)

def setup_ai_keyboard_shortcuts(self):
    """Configure les raccourcis clavier pour l'IA"""
    if self.ai_menu_system:
        # Ctrl+Alt+A pour ouvrir le menu IA
        self.root.bind('<Control-Alt-a>', lambda e: self.ai_menu_system.toggle_ai_menu())
        
        # Ctrl+Alt+S pour afficher le statut IA
        self.root.bind('<Control-Alt-s>', lambda e: self.show_ai_status())

# ========== FIN DE L'INT√âGRATION ==========
'''
    
    return integration_code

def create_integration_example():
    """Cr√©e un exemple d'int√©gration compl√®te"""
    
    example_code = '''
# EXEMPLE COMPLET D'INT√âGRATION DANS VOTRE CLASSE PRINCIPALE

import tkinter as tk
from tkinter import ttk
# ... vos autres imports ...

# Import IA
try:
    from ai_menu_system import setup_ai_menu_system
    AI_MENU_AVAILABLE = True
except ImportError:
    AI_MENU_AVAILABLE = False

class YourMusicPlayer:
    def __init__(self):
        # ... votre initialisation existante ...
        
        # Cr√©er l'interface
        self.create_interface()
        
        # Initialiser l'IA √† la fin
        self.setup_ai_system()
    
    def create_interface(self):
        """Cr√©e l'interface utilisateur"""
        # ... votre code d'interface existant ...
        
        # Frame pour les boutons de contr√¥le
        self.control_frame = tk.Frame(self.root)
        self.control_frame.pack(...)
        
        # Cr√©er les boutons de contr√¥le
        self.create_control_buttons()
    
    def create_control_buttons(self):
        """Cr√©e les boutons de contr√¥le incluant le bouton IA"""
        
        # Bouton IA (NOUVEAU - √† placer avant auto_scroll)
        if hasattr(self, 'ai_menu_system') and self.ai_menu_system:
            self.ai_button = self.ai_menu_system.create_ai_button(self.control_frame)
            if self.ai_button:
                self.ai_button.pack(side=tk.LEFT, padx=2)
        
        # Vos boutons existants (auto_scroll, etc.)
        # self.auto_scroll_button = tk.Button(...)
        # self.auto_scroll_button.pack(side=tk.LEFT, padx=2)
    
    def setup_ai_system(self):
        """Configure le syst√®me d'IA"""
        if AI_MENU_AVAILABLE:
            try:
                self.ai_menu_system = setup_ai_menu_system(self)
                
                # Recr√©er les boutons pour inclure le bouton IA
                if hasattr(self, 'control_frame'):
                    # D√©truire les boutons existants
                    for widget in self.control_frame.winfo_children():
                        widget.destroy()
                    
                    # Recr√©er avec le bouton IA
                    self.create_control_buttons()
                
                print("ü§ñ Syst√®me IA configur√© avec succ√®s")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur configuration IA: {e}")
                self.ai_menu_system = None
        else:
            self.ai_menu_system = None
    
    # ... le reste de vos m√©thodes existantes ...
'''
    
    return example_code

def find_integration_points():
    """Aide √† trouver les points d'int√©gration dans le code existant"""
    
    points = '''
# POINTS D'INT√âGRATION √Ä CHERCHER DANS VOTRE CODE

1. CR√âATION DES BOUTONS DE CONTR√îLE
   Cherchez des lignes comme :
   - tk.Button(..., image=self.icons["auto_scroll"], ...)
   - self.auto_scroll_button = tk.Button(...)
   - Boutons dans un Frame de contr√¥le
   
   ‚Üí Ajoutez le bouton IA AVANT le bouton auto_scroll

2. INITIALISATION DE L'INTERFACE
   Cherchez :
   - def __init__(self):
   - self.create_interface()
   - self.setup_ui()
   
   ‚Üí Ajoutez self.setup_ai_system() √† la fin

3. SYST√àME DE RECOMMANDATION EXISTANT
   Cherchez :
   - RecommendationSystem
   - get_recommendations
   - filter_new_recommendations
   
   ‚Üí Modifiez pour utiliser l'IA si activ√©e

4. M√âTHODES DE LECTURE
   Cherchez :
   - def play_track(self):
   - def next_track(self):
   - def toggle_like(self):
   
   ‚Üí L'int√©gration IA se fait automatiquement

5. CONFIGURATION/SAUVEGARDE
   Cherchez :
   - save_config()
   - load_config()
   - config.json
   
   ‚Üí La config IA est automatiquement int√©gr√©e
'''
    
    return points

if __name__ == "__main__":
    print("üîß GUIDE D'INT√âGRATION DU BOUTON IA")
    print("=" * 50)
    
    print("\nüìã √âTAPES D'INT√âGRATION:")
    print("1. Copiez les fichiers IA dans votre projet")
    print("2. Ajoutez les imports dans votre fichier principal")
    print("3. Modifiez la cr√©ation des boutons de contr√¥le")
    print("4. Initialisez le syst√®me IA")
    print("5. Testez le bouton et le menu")
    
    print("\nüîç POINTS D'INT√âGRATION:")
    print(find_integration_points())
    
    print("\nüíª CODE D'INT√âGRATION:")
    print(integrate_ai_button_to_main_app())
    
    print("\nüìù EXEMPLE COMPLET:")
    print(create_integration_example())
    
    print("\n‚úÖ FICHIERS N√âCESSAIRES:")
    print("- ai_recommendation_system.py")
    print("- ai_integration.py") 
    print("- ai_menu_system.py")
    print("- setup_ai.py")
    print("- assets/activate_ai.png")
    print("- assets/activate_ai_active.png")
    
    print("\nüéØ R√âSULTAT ATTENDU:")
    print("- Bouton IA √† gauche du bouton auto_scroll")
    print("- Clic ouvre un menu avec 2 options cochables")
    print("- Bouton devient bleu si au moins une option coch√©e")
    print("- Option 'Learning' active l'apprentissage IA")
    print("- Option 'Recommendations' utilise l'IA pour choisir")
    print("- Bouton 'Reset datas' remet l'IA √† z√©ro")