#!/usr/bin/env python3
"""
Test de la correction de la mise √† jour de la scrollbar
V√©rifie que la scrollbar se met √† jour correctement apr√®s l'ajout d'√©l√©ments vers le bas
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
parent_dir = os.path.dirname(os.path.abspath(__file__))
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

def test_scrollbar_update_logic():
    """Test de la logique de mise √† jour de la scrollbar"""
    print("üß™ TEST: Logique de mise √† jour de la scrollbar")
    
    try:
        import tkinter as tk
        
        # Cr√©er une fen√™tre de test
        root = tk.Tk()
        root.title("Test Scrollbar Update")
        root.geometry("400x300")
        
        # Cr√©er un canvas avec scrollbar
        canvas = tk.Canvas(root, bg='white')
        scrollbar = tk.Scrollbar(root, orient="vertical", command=canvas.yview)
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Frame container pour les √©l√©ments
        container = tk.Frame(canvas, bg='lightgray')
        canvas.create_window((0, 0), window=container, anchor="nw")
        
        # Pack les widgets
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Fonction pour ajouter des √©l√©ments
        def add_items(count, prefix="Item"):
            for i in range(count):
                item = tk.Label(container, text=f"{prefix} {i+1}", 
                               bg='lightblue', relief='solid', bd=1, height=2)
                item.pack(fill='x', pady=1)
            
            # Mettre √† jour la r√©gion de scroll
            container.update_idletasks()
            canvas.configure(scrollregion=canvas.bbox("all"))
            
            print(f"‚úÖ Ajout√© {count} √©l√©ments, r√©gion de scroll mise √† jour")
        
        # Fonction pour tester la scrollbar
        def test_scrollbar_state():
            bbox = canvas.bbox("all")
            scroll_region = canvas.cget('scrollregion')
            view = canvas.yview()
            
            print(f"üìä √âtat de la scrollbar:")
            print(f"   ‚Ä¢ BBox: {bbox}")
            print(f"   ‚Ä¢ Scroll region: {scroll_region}")
            print(f"   ‚Ä¢ Vue actuelle: {view}")
            
            if bbox and len(bbox) >= 4:
                content_height = bbox[3] - bbox[1]
                canvas_height = canvas.winfo_height()
                print(f"   ‚Ä¢ Hauteur contenu: {content_height}px")
                print(f"   ‚Ä¢ Hauteur canvas: {canvas_height}px")
                print(f"   ‚Ä¢ Scroll n√©cessaire: {'Oui' if content_height > canvas_height else 'Non'}")
        
        # Test initial
        print("üìä √âtat initial:")
        add_items(5, "Initial")
        test_scrollbar_state()
        
        # Attendre un peu puis ajouter plus d'√©l√©ments
        def add_more_items():
            print("\nüìä Ajout d'√©l√©ments suppl√©mentaires:")
            add_items(10, "Added")
            test_scrollbar_state()
            
            # Tester le scroll
            print("\nüîÑ Test du scroll:")
            canvas.yview_moveto(0.5)  # Aller au milieu
            print(f"   ‚Ä¢ Position apr√®s scroll au milieu: {canvas.yview()}")
            
            # Forcer la mise √† jour de la scrollbar
            current_view = canvas.yview()
            canvas.yview_moveto(current_view[0])
            print(f"   ‚Ä¢ Position apr√®s force update: {canvas.yview()}")
            
            root.after(2000, root.quit)  # Quitter apr√®s 2 secondes
        
        root.after(1000, add_more_items)  # Ajouter apr√®s 1 seconde
        
        # Lancer la boucle d'√©v√©nements
        root.mainloop()
        
        root.destroy()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test scrollbar: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_scroll_region_calculation():
    """Test des calculs de r√©gion de scroll"""
    print("\nüß™ TEST: Calculs de r√©gion de scroll")
    
    # Sc√©narios de test
    scenarios = [
        {
            "name": "Petite liste (10 √©l√©ments)",
            "items": 10,
            "item_height": 60,
            "canvas_height": 400
        },
        {
            "name": "Liste moyenne (50 √©l√©ments)",
            "items": 50,
            "item_height": 60,
            "canvas_height": 400
        },
        {
            "name": "Grande liste (100 √©l√©ments)",
            "items": 100,
            "item_height": 60,
            "canvas_height": 400
        }
    ]
    
    for scenario in scenarios:
        print(f"\nüìä {scenario['name']}:")
        
        total_content_height = scenario['items'] * scenario['item_height']
        canvas_height = scenario['canvas_height']
        
        print(f"   ‚Ä¢ Nombre d'√©l√©ments: {scenario['items']}")
        print(f"   ‚Ä¢ Hauteur par √©l√©ment: {scenario['item_height']}px")
        print(f"   ‚Ä¢ Hauteur totale contenu: {total_content_height}px")
        print(f"   ‚Ä¢ Hauteur canvas: {canvas_height}px")
        
        # Calculer si le scroll est n√©cessaire
        scroll_needed = total_content_height > canvas_height
        print(f"   ‚Ä¢ Scroll n√©cessaire: {'Oui' if scroll_needed else 'Non'}")
        
        if scroll_needed:
            # Calculer la taille relative de la scrollbar
            scrollbar_ratio = canvas_height / total_content_height
            print(f"   ‚Ä¢ Ratio scrollbar: {scrollbar_ratio:.3f}")
            print(f"   ‚Ä¢ Taille scrollbar: {scrollbar_ratio * 100:.1f}% de la hauteur")
        
        # Simuler l'ajout de 10 √©l√©ments suppl√©mentaires
        new_items = scenario['items'] + 10
        new_total_height = new_items * scenario['item_height']
        new_scrollbar_ratio = canvas_height / new_total_height if new_total_height > canvas_height else 1.0
        
        print(f"   ‚Ä¢ Apr√®s ajout de 10 √©l√©ments:")
        print(f"     - Nouvelle hauteur: {new_total_height}px")
        print(f"     - Nouveau ratio scrollbar: {new_scrollbar_ratio:.3f}")
        print(f"     - Changement ratio: {new_scrollbar_ratio - (scrollbar_ratio if scroll_needed else 1.0):.3f}")
    
    return True

def test_update_timing():
    """Test du timing des mises √† jour"""
    print("\nüß™ TEST: Timing des mises √† jour")
    
    try:
        import tkinter as tk
        import time
        
        # Cr√©er une fen√™tre de test
        root = tk.Tk()
        root.withdraw()  # Cacher la fen√™tre
        
        # Cr√©er les widgets
        canvas = tk.Canvas(root, width=300, height=200)
        container = tk.Frame(canvas)
        canvas.create_window((0, 0), window=container, anchor="nw")
        
        # Fonction pour mesurer le temps de mise √† jour
        def measure_update_time(operation_name, operation):
            start_time = time.time()
            operation()
            end_time = time.time()
            duration = (end_time - start_time) * 1000  # en millisecondes
            print(f"   ‚Ä¢ {operation_name}: {duration:.2f}ms")
            return duration
        
        print("üìä Mesure des temps de mise √† jour:")
        
        # Ajouter des √©l√©ments et mesurer
        def add_items():
            for i in range(20):
                item = tk.Label(container, text=f"Item {i+1}", height=2)
                item.pack(fill='x')
        
        def update_geometry():
            container.update_idletasks()
        
        def update_scroll_region():
            canvas.configure(scrollregion=canvas.bbox("all"))
        
        def force_scrollbar_update():
            current_view = canvas.yview()
            canvas.yview_moveto(current_view[0])
        
        # Mesurer chaque √©tape
        time1 = measure_update_time("Ajout d'√©l√©ments", add_items)
        time2 = measure_update_time("Mise √† jour g√©om√©trie", update_geometry)
        time3 = measure_update_time("Mise √† jour r√©gion scroll", update_scroll_region)
        time4 = measure_update_time("Force scrollbar update", force_scrollbar_update)
        
        total_time = time1 + time2 + time3 + time4
        print(f"   ‚Ä¢ Temps total: {total_time:.2f}ms")
        
        # Recommandations de d√©lai
        recommended_delay = max(10, int(total_time * 1.5))
        print(f"   ‚Ä¢ D√©lai recommand√©: {recommended_delay}ms")
        
        root.destroy()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test timing: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üéØ TEST DE LA CORRECTION DE LA MISE √Ä JOUR DE LA SCROLLBAR")
    print("=" * 75)
    
    # Tests
    scrollbar_ok = test_scrollbar_update_logic()
    calculation_ok = test_scroll_region_calculation()
    timing_ok = test_update_timing()
    
    # R√©sum√©
    print("\n" + "=" * 75)
    print("üìä R√âSUM√â DES TESTS:")
    print(f"   ‚Ä¢ Logique scrollbar: {'‚úÖ OK' if scrollbar_ok else '‚ùå √âCHEC'}")
    print(f"   ‚Ä¢ Calculs r√©gion scroll: {'‚úÖ OK' if calculation_ok else '‚ùå √âCHEC'}")
    print(f"   ‚Ä¢ Timing mises √† jour: {'‚úÖ OK' if timing_ok else '‚ùå √âCHEC'}")
    
    if all([scrollbar_ok, calculation_ok, timing_ok]):
        print("\nüéâ TOUS LES TESTS R√âUSSIS!")
        print("‚úÖ La correction de la mise √† jour de la scrollbar fonctionne")
    else:
        print("\n‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â")
        print("üîß V√©rifiez les erreurs ci-dessus")
    
    print("\nüìã CORRECTIONS APPORT√âES:")
    print("   ‚Ä¢ Force update_idletasks() avant recalcul de la r√©gion de scroll")
    print("   ‚Ä¢ D√©lai de 10ms pour update_scroll_region_delayed()")
    print("   ‚Ä¢ D√©lai de 20ms pour force_scrollbar_update()")
    print("   ‚Ä¢ V√©rification du changement d'√©tat (largeur, hauteur, nombre d'enfants)")
    print("   ‚Ä¢ Force yview_moveto() pour d√©clencher la mise √† jour de la scrollbar")
    
    print("\nüéÆ R√âSULTAT ATTENDU:")
    print("   ‚Ä¢ AVANT: Scrollbar mal dimensionn√©e apr√®s ajout d'√©l√©ments")
    print("   ‚Ä¢ APR√àS: Scrollbar correctement mise √† jour imm√©diatement")
    print("   ‚Ä¢ Rectangle de la scrollbar √† la bonne taille")
    print("   ‚Ä¢ Position de la scrollbar correcte")
    print("   ‚Ä¢ Scroll fluide et naturel")

if __name__ == "__main__":
    main()