"""
Version modulaire de Pipi Player
Utilise les modules extraits pour am√©liorer la lisibilit√©
"""

# Imports depuis les modules
from modules.imports_and_constants import *
from modules import initialization
from modules import keyboard_events
from modules import ui_creation

class MusicPlayer:
    def __init__(self, root):
        """Initialise le lecteur de musique avec une approche modulaire"""
        
        # Initialisation de la fen√™tre
        initialization.init_window(self, root)
        
        # Initialisation de pygame
        initialization.init_pygame(self)
        
        # Initialisation des variables
        initialization.init_variables(self)
        
        # Initialisation des composants
        initialization.init_components(self)
        
        # Chargement des donn√©es
        initialization.init_data(self)
    
    # ===== M√âTHODES D'√âV√âNEMENTS CLAVIER =====
    def setup_keyboard_bindings(self):
        return keyboard_events.setup_keyboard_bindings(self)
    
    def on_space_pressed(self, event):
        return keyboard_events.on_space_pressed(self, event)
    
    def on_root_click(self, event):
        return keyboard_events.on_root_click(self, event)
    
    def setup_focus_bindings(self):
        return keyboard_events.setup_focus_bindings(self)
    
    # ===== M√âTHODES D'INTERFACE =====
    def create_ui(self):
        return ui_creation.create_ui(self)
    
    def on_tab_changed(self, event):
        return ui_creation.on_tab_changed(self, event)
    
    def colorize_ttk_frames(self, widget, colors=("red", "green", "blue", "yellow", "cyan", "magenta")):
        return ui_creation.colorize_ttk_frames(self, widget, colors)
    
    # ===== M√âTHODES ORIGINALES (√† extraire dans d'autres modules) =====
    
    def _count_downloaded_files(self):
        """Compte les fichiers t√©l√©charg√©s sans les afficher"""
        downloads_dir = "downloads"
        
        # Cr√©er le dossier s'il n'existe pas
        if not os.path.exists(downloads_dir):
            os.makedirs(downloads_dir)
            self.num_downloaded_files = 0
            return
        
        # Extensions audio support√©es
        audio_extensions = ('.mp3', '.wav', '.ogg', '.flac', '.m4a')
        
        # Compter les fichiers
        count = 0
        for filename in os.listdir(downloads_dir):
            if filename.lower().endswith(audio_extensions):
                count += 1
        
        self.num_downloaded_files = count

    def _update_downloads_button(self):
        """Met √† jour le texte du bouton t√©l√©charg√©es avec le nombre actuel"""
        if hasattr(self, 'downloads_btn'):
            self.downloads_btn.configure(text="T√©l√©charg√©es " + f"({self.num_downloaded_files})")
    
    # NOTE: Toutes les autres m√©thodes du fichier original main.py 
    # doivent √™tre copi√©es ici ou extraites dans d'autres modules
    
    # Placeholder pour les m√©thodes manquantes - √† impl√©menter
    def load_icons(self):
        """Charge les ic√¥nes (√† impl√©menter)"""
        pass
    
    def _update_volume_sliders(self):
        """Met √† jour les sliders de volume (√† impl√©menter)"""
        pass
    
    def update_time(self):
        """Thread de mise √† jour du temps (√† impl√©menter)"""
        pass
    
    def load_playlists(self):
        """Charge les playlists (√† impl√©menter)"""
        pass
    
    def load_config(self):
        """Charge la configuration (√† impl√©menter)"""
        pass
    
    def setup_search_tab(self):
        """Configure l'onglet de recherche (√† impl√©menter)"""
        pass
    
    def setup_library_tab(self):
        """Configure l'onglet de biblioth√®que (√† impl√©menter)"""
        pass
    
    def setup_controls(self):
        """Configure les contr√¥les de lecture (√† impl√©menter)"""
        pass
    
    def play_pause(self):
        """Lecture/pause (√† impl√©menter)"""
        pass

# Point d'entr√©e
if __name__ == "__main__":
    print("üéµ Pipi Player - Version Modulaire")
    print("=" * 50)
    print("Cette version utilise des modules pour am√©liorer la lisibilit√©")
    print("Fichier original: 4582 lignes ‚Üí Version modulaire")
    print("=" * 50)
    
    root = tk.Tk()
    player = MusicPlayer(root)
    
    # Configuration de fermeture (√† impl√©menter)
    # root.protocol("WM_DELETE_WINDOW", player.on_closing)
    
    root.mainloop()