"""
Syst√®me d'IA de recommandation musicale bas√© sur le machine learning
Analyse les comportements utilisateur pour pr√©dire et recommander la meilleure musique
"""

import os
import json
import time
import numpy as np
import threading
from datetime import datetime, timedelta
from collections import defaultdict, deque
import pickle
import hashlib

# Machine Learning imports
try:
    from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
    from sklearn.linear_model import LogisticRegression
    from sklearn.preprocessing import StandardScaler
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import accuracy_score, classification_report
    import pandas as pd
    ML_AVAILABLE = True
    print("ü§ñ IA: Modules ML disponibles")
except ImportError as e:
    print(f"‚ö†Ô∏è IA: Modules ML non disponibles: {e}")
    print("üí° IA: Installation recommand√©e: pip install scikit-learn pandas")
    ML_AVAILABLE = False

class MusicAIRecommendationSystem:
    """
    Syst√®me d'IA avanc√© pour recommandations musicales bas√© sur l'analyse comportementale
    """
    
    def __init__(self, main_app, data_file="ai_music_data.json", model_file="ai_music_model.pkl"):
        self.main_app = main_app
        self.data_file = os.path.join(os.path.dirname(__file__), data_file)
        self.model_file = os.path.join(os.path.dirname(__file__), model_file)
        
        # Donn√©es comportementales
        self.user_behavior_data = {
            'listening_sessions': [],  # Sessions d'√©coute compl√®tes
            'skip_patterns': [],       # Patterns de skip
            'like_patterns': [],       # Patterns de like
            'favorite_patterns': [],   # Patterns de favoris
            'time_patterns': {},       # Patterns temporels (heure, jour)
            'sequence_patterns': [],   # S√©quences de chansons √©cout√©es
            'volume_patterns': {},     # Patterns de volume par chanson
            'mood_indicators': {},     # Indicateurs d'humeur bas√©s sur le comportement
            'song_statistics': {}      # Statistiques d√©taill√©es par chanson
        }
        
        # M√©triques de session courante
        self.current_session = {
            'start_time': time.time(),
            'songs_played': [],
            'skips': [],
            'likes': [],
            'favorites': [],
            'volume_changes': [],
            'listening_duration': {}
        }
        
        # Mod√®les ML
        self.models = {
            'skip_predictor': None,      # Pr√©dit si une chanson sera skipp√©e
            'like_predictor': None,      # Pr√©dit si une chanson sera lik√©e
            'mood_classifier': None,     # Classifie l'humeur de l'utilisateur
            'recommendation_ranker': None # Classe les recommandations
        }
        
        self.scaler = StandardScaler() if ML_AVAILABLE else None
        self.is_training = False
        
        # Chargement des donn√©es existantes
        self.load_data()
        
        # Variables de tracking
        self.last_song_start_time = None
        self.last_song_path = None
        self.skip_threshold = 0.3  # Consid√©r√© comme skip si < 30% √©cout√©
        
        print("ü§ñ IA: Syst√®me de recommandation initialis√©")
    
    def analyze_skip_context(self, song_path, listening_ratio, was_manual_skip):
        """Analyse le contexte d'un skip pour d√©terminer sa nature"""
        try:
            context = {
                'time_of_day': time.localtime().tm_hour,
                'day_of_week': time.localtime().tm_wday,
                'playlist_position': getattr(self.main_app, 'current_index', 0),
                'playlist_size': len(getattr(self.main_app, 'main_playlist', [])),
                'recent_skips': len([s for s in self.user_behavior_data['skip_patterns'][-5:] 
                                   if time.time() - s['timestamp'] < 300])  # 5 derniers skips en 5 min
            }
            
            # Analyser le type de skip
            if listening_ratio < 0.05:  # Moins de 5% √©cout√©
                skip_type = "immediate_skip"
                reason = "dislike_immediate"
                confidence = 0.9
            elif listening_ratio < 0.15:  # Moins de 15% √©cout√©
                skip_type = "early_skip"
                reason = "dislike_early"
                confidence = 0.8
            elif listening_ratio > 0.8:  # Plus de 80% √©cout√©
                if context['recent_skips'] >= 2:
                    skip_type = "navigation_skip"
                    reason = "seeking_next"
                    confidence = 0.7
                else:
                    skip_type = "late_skip"
                    reason = "ending_dislike"
                    confidence = 0.6
            elif 0.4 <= listening_ratio <= 0.8:  # Entre 40% et 80%
                if was_manual_skip and context['recent_skips'] >= 1:
                    skip_type = "navigation_skip"
                    reason = "seeking_specific"
                    confidence = 0.6
                else:
                    skip_type = "mid_skip"
                    reason = "moderate_dislike"
                    confidence = 0.7
            else:  # Entre 15% et 40%
                skip_type = "early_mid_skip"
                reason = "early_dislike"
                confidence = 0.8
            
            # Ajuster la confiance selon le contexte
            if context['recent_skips'] >= 3:
                # Beaucoup de skips r√©cents = probablement navigation
                if skip_type != "navigation_skip":
                    confidence *= 0.7
                    reason = "possible_navigation"
            
            return {
                'type': skip_type,
                'reason': reason,
                'confidence': confidence,
                'context': context
            }
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur analyse skip: {e}")
            return {
                'type': 'unknown_skip',
                'reason': 'analysis_error',
                'confidence': 0.5,
                'context': {}
            }
    
    def update_song_statistics(self, song_path, action_type, action_data):
        """Met √† jour les statistiques d√©taill√©es d'une chanson"""
        try:
            song_key = os.path.basename(song_path)
            
            if song_key not in self.user_behavior_data['song_statistics']:
                self.user_behavior_data['song_statistics'][song_key] = {
                    'full_path': song_path,
                    'play_count': 0,
                    'skip_count': 0,
                    'like_count': 0,
                    'favorite_count': 0,
                    'total_listening_time': 0,
                    'avg_listening_ratio': 0,
                    'skip_types': {},
                    'listening_ratios': [],
                    'ai_predictions': [],
                    'user_scores': [],
                    'context_patterns': {},
                    'last_played': None,
                    'first_played': None
                }
            
            stats = self.user_behavior_data['song_statistics'][song_key]
            
            # Mettre √† jour selon le type d'action
            if action_type == 'play':
                stats['play_count'] += 1
                stats['last_played'] = time.time()
                if stats['first_played'] is None:
                    stats['first_played'] = time.time()
                    
            elif action_type == 'skip':
                stats['skip_count'] += 1
                listening_ratio = action_data.get('listening_ratio', 0)
                stats['listening_ratios'].append(listening_ratio)
                
                # Compter les types de skip
                skip_type = action_data.get('skip_type', 'unknown')
                if skip_type not in stats['skip_types']:
                    stats['skip_types'][skip_type] = 0
                stats['skip_types'][skip_type] += 1
                
                # Calculer la moyenne d'√©coute
                if stats['listening_ratios']:
                    stats['avg_listening_ratio'] = sum(stats['listening_ratios']) / len(stats['listening_ratios'])
                
            elif action_type == 'like':
                stats['like_count'] += 1
                
            elif action_type == 'favorite':
                stats['favorite_count'] += 1
            
            elif action_type == 'prediction':
                # Ajouter une pr√©diction IA
                prediction_data = {
                    'timestamp': time.time(),
                    'skip_probability': action_data.get('skip_probability', 0),
                    'like_probability': action_data.get('like_probability', 0),
                    'ai_score': action_data.get('ai_score', 0)
                }
                stats['ai_predictions'].append(prediction_data)
                
                # Garder seulement les 20 derni√®res pr√©dictions
                if len(stats['ai_predictions']) > 20:
                    stats['ai_predictions'] = stats['ai_predictions'][-20:]
            
            # Calculer des scores d√©riv√©s
            self.calculate_derived_scores(stats)
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur mise √† jour statistiques: {e}")
    
    def calculate_derived_scores(self, stats):
        """Calcule des scores d√©riv√©s pour une chanson"""
        try:
            # Score de satisfaction utilisateur (0-1)
            total_interactions = stats['play_count'] + stats['skip_count']
            if total_interactions > 0:
                satisfaction_score = (
                    (stats['like_count'] * 1.0) +
                    (stats['favorite_count'] * 1.5) +
                    (stats['avg_listening_ratio'] * 0.8) -
                    (stats['skip_count'] * 0.3 / total_interactions)
                )
                stats['user_satisfaction_score'] = max(0, min(1, satisfaction_score / 2))
            else:
                stats['user_satisfaction_score'] = 0.5
            
            # Score de pr√©dictibilit√© IA (moyenne des pr√©dictions r√©centes)
            if stats['ai_predictions']:
                recent_predictions = stats['ai_predictions'][-5:]  # 5 derni√®res
                avg_skip_pred = sum(p['skip_probability'] for p in recent_predictions) / len(recent_predictions)
                avg_like_pred = sum(p['like_probability'] for p in recent_predictions) / len(recent_predictions)
                
                stats['ai_skip_prediction'] = avg_skip_pred
                stats['ai_like_prediction'] = avg_like_pred
                stats['ai_overall_score'] = (1 - avg_skip_pred) + avg_like_pred
            else:
                stats['ai_skip_prediction'] = 0.5
                stats['ai_like_prediction'] = 0.5
                stats['ai_overall_score'] = 0.5
            
            # Score de d√©couverte (nouveau vs familier)
            if stats['play_count'] == 1:
                stats['discovery_score'] = 1.0  # Nouvelle d√©couverte
            elif stats['play_count'] <= 3:
                stats['discovery_score'] = 0.7  # R√©cente d√©couverte
            elif stats['play_count'] <= 10:
                stats['discovery_score'] = 0.3  # Familier
            else:
                stats['discovery_score'] = 0.1  # Tr√®s familier
            
            # Score de fid√©lit√© (tendance √† revenir √† cette chanson)
            if stats['play_count'] > 1 and stats['first_played']:
                time_span = time.time() - stats['first_played']
                if time_span > 0:
                    play_frequency = stats['play_count'] / (time_span / 86400)  # Plays par jour
                    stats['loyalty_score'] = min(1.0, play_frequency * 10)
                else:
                    stats['loyalty_score'] = 0.5
            else:
                stats['loyalty_score'] = 0.0
                
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur calcul scores d√©riv√©s: {e}")
    
    def get_top_songs_statistics(self, limit=20, sort_by='user_satisfaction_score'):
        """Retourne les statistiques des meilleures chansons"""
        try:
            songs_stats = []
            
            for song_key, stats in self.user_behavior_data['song_statistics'].items():
                if stats['play_count'] > 0:  # Seulement les chansons jou√©es
                    song_info = {
                        'song_name': song_key,
                        'full_path': stats['full_path'],
                        **stats
                    }
                    songs_stats.append(song_info)
            
            # Trier selon le crit√®re demand√©
            if sort_by in ['user_satisfaction_score', 'ai_overall_score', 'play_count', 'loyalty_score']:
                songs_stats.sort(key=lambda x: x.get(sort_by, 0), reverse=True)
            
            return songs_stats[:limit]
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur r√©cup√©ration top songs: {e}")
            return []
        
    def load_data(self):
        """Charge les donn√©es comportementales existantes"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.user_behavior_data.update(data)
                print(f"ü§ñ IA: Donn√©es charg√©es - {len(self.user_behavior_data['listening_sessions'])} sessions")
            
            # Charger les mod√®les ML
            if ML_AVAILABLE and os.path.exists(self.model_file):
                with open(self.model_file, 'rb') as f:
                    model_data = pickle.load(f)
                    self.models = model_data.get('models', self.models)
                    self.scaler = model_data.get('scaler', self.scaler)
                print("ü§ñ IA: Mod√®les ML charg√©s")
                
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur chargement donn√©es: {e}")
    
    def save_data(self):
        """Sauvegarde les donn√©es comportementales"""
        try:
            # Sauvegarder les donn√©es comportementales
            with open(self.data_file, 'w', encoding='utf-8') as f:
                # Convertir les sets en listes pour JSON
                data_to_save = {}
                for key, value in self.user_behavior_data.items():
                    if isinstance(value, set):
                        data_to_save[key] = list(value)
                    else:
                        data_to_save[key] = value
                json.dump(data_to_save, f, ensure_ascii=False, indent=2)
            
            # Sauvegarder les mod√®les ML
            if ML_AVAILABLE and any(model is not None for model in self.models.values()):
                with open(self.model_file, 'wb') as f:
                    pickle.dump({
                        'models': self.models,
                        'scaler': self.scaler
                    }, f)
                    
            print("ü§ñ IA: Donn√©es sauvegard√©es")
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur sauvegarde: {e}")
    
    def extract_song_features(self, song_path):
        """Extrait les caract√©ristiques d'une chanson pour l'analyse ML"""
        try:
            features = {}
            
            # Caract√©ristiques basiques du fichier
            features['file_size'] = os.path.getsize(song_path) if os.path.exists(song_path) else 0
            features['filename_length'] = len(os.path.basename(song_path))
            
            # Hash du nom pour identifier la chanson de mani√®re unique
            song_hash = hashlib.md5(song_path.encode()).hexdigest()[:8]
            features['song_id'] = song_hash
            
            # M√©tadonn√©es audio si disponibles
            try:
                import mutagen
                audio_file = mutagen.File(song_path)
                if audio_file:
                    features['duration'] = audio_file.info.length if hasattr(audio_file.info, 'length') else 0
                    features['bitrate'] = getattr(audio_file.info, 'bitrate', 0)
                    
                    # Tags
                    features['has_artist'] = 1 if audio_file.get('TPE1') or audio_file.get('ARTIST') else 0
                    features['has_album'] = 1 if audio_file.get('TALB') or audio_file.get('ALBUM') else 0
                    features['has_title'] = 1 if audio_file.get('TIT2') or audio_file.get('TITLE') else 0
                else:
                    features.update({'duration': 0, 'bitrate': 0, 'has_artist': 0, 'has_album': 0, 'has_title': 0})
            except:
                features.update({'duration': 0, 'bitrate': 0, 'has_artist': 0, 'has_album': 0, 'has_title': 0})
            
            # Caract√©ristiques temporelles
            current_time = datetime.now()
            features['hour'] = current_time.hour
            features['day_of_week'] = current_time.weekday()
            features['is_weekend'] = 1 if current_time.weekday() >= 5 else 0
            
            # Historique de la chanson
            song_history = self.get_song_history(song_path)
            features['play_count'] = song_history['play_count']
            features['skip_count'] = song_history['skip_count']
            features['like_count'] = song_history['like_count']
            features['avg_listening_ratio'] = song_history['avg_listening_ratio']
            
            # Position dans la playlist
            if hasattr(self.main_app, 'main_playlist') and hasattr(self.main_app, 'current_index'):
                playlist_size = len(self.main_app.main_playlist)
                if playlist_size > 0:
                    features['playlist_position'] = self.main_app.current_index / playlist_size
                    features['playlist_size'] = playlist_size
                else:
                    features['playlist_position'] = 0
                    features['playlist_size'] = 0
            else:
                features['playlist_position'] = 0
                features['playlist_size'] = 0
            
            return features
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur extraction features pour {song_path}: {e}")
            return {}
    
    def get_song_history(self, song_path):
        """R√©cup√®re l'historique d'une chanson"""
        history = {
            'play_count': 0,
            'skip_count': 0,
            'like_count': 0,
            'avg_listening_ratio': 0.0
        }
        
        try:
            # Compter dans les sessions d'√©coute
            listening_ratios = []
            for session in self.user_behavior_data['listening_sessions']:
                for song_data in session.get('songs', []):
                    if song_data.get('path') == song_path:
                        history['play_count'] += 1
                        listening_ratios.append(song_data.get('listening_ratio', 0))
            
            # Compter les skips
            for skip in self.user_behavior_data['skip_patterns']:
                if skip.get('song_path') == song_path:
                    history['skip_count'] += 1
            
            # Compter les likes
            for like in self.user_behavior_data['like_patterns']:
                if like.get('song_path') == song_path:
                    history['like_count'] += 1
            
            # Calculer la moyenne d'√©coute
            if listening_ratios:
                history['avg_listening_ratio'] = np.mean(listening_ratios)
                
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur r√©cup√©ration historique: {e}")
        
        return history
    
    def on_song_start(self, song_path):
        """Appel√© quand une chanson commence"""
        print(f"ü§ñ IA: D√©but chanson - {os.path.basename(song_path)}")
        
        # Finaliser la chanson pr√©c√©dente si n√©cessaire
        if self.last_song_path and self.last_song_start_time:
            self.on_song_end(self.last_song_path, was_skipped=True)
        
        self.last_song_path = song_path
        self.last_song_start_time = time.time()
        
        # Mettre √† jour les statistiques de lecture
        self.update_song_statistics(song_path, 'play', {})
        
        # Ajouter √† la session courante
        self.current_session['songs_played'].append({
            'path': song_path,
            'start_time': self.last_song_start_time,
            'features': self.extract_song_features(song_path)
        })
        
        # Pr√©dire le comportement de l'utilisateur
        predictions = self.predict_user_behavior(song_path)
        
        # Enregistrer les pr√©dictions dans les statistiques
        if predictions:
            self.update_song_statistics(song_path, 'prediction', predictions)
    
    def on_song_end(self, song_path, was_skipped=False, listening_duration=None):
        """Appel√© quand une chanson se termine"""
        if not self.last_song_start_time:
            return
            
        end_time = time.time()
        total_duration = end_time - self.last_song_start_time
        
        # Calculer le ratio d'√©coute
        if listening_duration is None:
            listening_duration = total_duration
            
        # Obtenir la dur√©e r√©elle de la chanson
        try:
            import mutagen
            audio_file = mutagen.File(song_path)
            actual_duration = audio_file.info.length if audio_file and hasattr(audio_file.info, 'length') else total_duration
        except:
            actual_duration = total_duration
        
        listening_ratio = min(listening_duration / actual_duration, 1.0) if actual_duration > 0 else 0
        
        print(f"ü§ñ IA: Fin chanson - {os.path.basename(song_path)}")
        print(f"ü§ñ IA: Ratio d'√©coute: {listening_ratio:.2f} ({'skip' if was_skipped or listening_ratio < self.skip_threshold else 'compl√®te'})")
        
        # Enregistrer les donn√©es
        song_data = {
            'path': song_path,
            'start_time': self.last_song_start_time,
            'end_time': end_time,
            'listening_duration': listening_duration,
            'total_duration': actual_duration,
            'listening_ratio': listening_ratio,
            'was_skipped': was_skipped or listening_ratio < self.skip_threshold,
            'features': self.extract_song_features(song_path)
        }
        
        # Ajouter aux patterns appropri√©s
        if song_data['was_skipped']:
            # Analyser le type de skip de mani√®re plus intelligente
            skip_analysis = self.analyze_skip_context(song_path, listening_ratio, was_skipped)
            
            skip_data = {
                'song_path': song_path,
                'timestamp': end_time,
                'listening_ratio': listening_ratio,
                'skip_reason': skip_analysis['reason'],
                'skip_type': skip_analysis['type'],
                'confidence': skip_analysis['confidence'],
                'context': skip_analysis['context']
            }
            
            self.user_behavior_data['skip_patterns'].append(skip_data)
            
            # Mettre √† jour les statistiques de la chanson
            self.update_song_statistics(song_path, 'skip', skip_data)
            
            print(f"ü§ñ IA: Skip d√©tect√© - {skip_analysis['type']} ({skip_analysis['confidence']:.0%} confiance)")
        
        # Mettre √† jour la session courante
        if self.current_session['songs_played']:
            self.current_session['songs_played'][-1].update(song_data)
        
        # R√©initialiser
        self.last_song_path = None
        self.last_song_start_time = None
        
        # Sauvegarder p√©riodiquement
        if len(self.current_session['songs_played']) % 5 == 0:
            self.save_session_data()
    
    def on_song_liked(self, song_path):
        """Appel√© quand une chanson est lik√©e"""
        print(f"ü§ñ IA: Like d√©tect√© - {os.path.basename(song_path)}")
        
        like_data = {
            'song_path': song_path,
            'timestamp': time.time(),
            'features': self.extract_song_features(song_path)
        }
        
        self.user_behavior_data['like_patterns'].append(like_data)
        self.current_session['likes'].append(like_data)
        
        # Analyser le pattern de like
        self.analyze_like_pattern(song_path)
    
    def on_song_favorited(self, song_path):
        """Appel√© quand une chanson est mise en favoris"""
        print(f"ü§ñ IA: Favori d√©tect√© - {os.path.basename(song_path)}")
        
        favorite_data = {
            'song_path': song_path,
            'timestamp': time.time(),
            'features': self.extract_song_features(song_path)
        }
        
        self.user_behavior_data['favorite_patterns'].append(favorite_data)
        self.current_session['favorites'].append(favorite_data)
        
        # Analyser le pattern de favori
        self.analyze_favorite_pattern(song_path)
    
    def on_volume_changed(self, song_path, old_volume, new_volume):
        """Appel√© quand le volume est chang√©"""
        volume_change = {
            'song_path': song_path,
            'timestamp': time.time(),
            'old_volume': old_volume,
            'new_volume': new_volume,
            'change_ratio': new_volume / old_volume if old_volume > 0 else 1.0
        }
        
        self.current_session['volume_changes'].append(volume_change)
        
        # Analyser si c'est un indicateur d'humeur
        if new_volume > old_volume * 1.2:
            print("ü§ñ IA: Volume augment√© significativement - possible indicateur d'appr√©ciation")
        elif new_volume < old_volume * 0.8:
            print("ü§ñ IA: Volume diminu√© significativement - possible indicateur de d√©sint√©r√™t")
    
    def predict_user_behavior(self, song_path):
        """Pr√©dit le comportement de l'utilisateur pour une chanson"""
        if not ML_AVAILABLE or not any(model is not None for model in self.models.values()):
            return None
        
        try:
            features = self.extract_song_features(song_path)
            if not features:
                return None
            
            # Convertir en format ML
            feature_vector = self.features_to_vector(features)
            if feature_vector is None:
                return None
            
            feature_vector = feature_vector.reshape(1, -1)
            
            # Pr√©dictions
            predictions = {}
            
            if self.models['skip_predictor'] is not None:
                skip_prob = self.models['skip_predictor'].predict_proba(feature_vector)[0]
                predictions['skip_probability'] = skip_prob[1] if len(skip_prob) > 1 else 0
                print(f"ü§ñ IA: Probabilit√© de skip: {predictions['skip_probability']:.2f}")
            
            if self.models['like_predictor'] is not None:
                like_prob = self.models['like_predictor'].predict_proba(feature_vector)[0]
                predictions['like_probability'] = like_prob[1] if len(like_prob) > 1 else 0
                print(f"ü§ñ IA: Probabilit√© de like: {predictions['like_probability']:.2f}")
            
            if self.models['mood_classifier'] is not None:
                mood = self.models['mood_classifier'].predict(feature_vector)[0]
                predictions['predicted_mood'] = mood
                print(f"ü§ñ IA: Humeur pr√©dite: {mood}")
            
            # Calculer un score IA global
            if predictions:
                skip_prob = predictions.get('skip_probability', 0.5)
                like_prob = predictions.get('like_probability', 0.5)
                predictions['ai_score'] = (1 - skip_prob) * 0.6 + like_prob * 0.4
            
            return predictions
            
            return predictions
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur pr√©diction: {e}")
            return None
    
    def features_to_vector(self, features):
        """Convertit les features en vecteur num√©rique pour ML"""
        try:
            # Liste des features num√©riques attendues
            expected_features = [
                'file_size', 'filename_length', 'duration', 'bitrate',
                'has_artist', 'has_album', 'has_title', 'hour', 'day_of_week',
                'is_weekend', 'play_count', 'skip_count', 'like_count',
                'avg_listening_ratio', 'playlist_position', 'playlist_size'
            ]
            
            vector = []
            for feature in expected_features:
                value = features.get(feature, 0)
                # Normaliser certaines valeurs
                if feature == 'file_size':
                    value = value / 1000000  # MB
                elif feature == 'duration':
                    value = value / 300  # Normaliser par 5 minutes
                elif feature == 'bitrate':
                    value = value / 320  # Normaliser par 320 kbps
                
                vector.append(float(value))
            
            return np.array(vector)
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur conversion features: {e}")
            return None
    
    def train_models(self):
        """Entra√Æne les mod√®les ML avec les donn√©es collect√©es"""
        if not ML_AVAILABLE:
            print("‚ö†Ô∏è IA: ML non disponible pour l'entra√Ænement")
            return
        
        if self.is_training:
            print("ü§ñ IA: Entra√Ænement d√©j√† en cours")
            return
        
        print("ü§ñ IA: D√©but de l'entra√Ænement des mod√®les...")
        self.is_training = True
        
        def train_thread():
            try:
                # Pr√©parer les donn√©es d'entra√Ænement
                training_data = self.prepare_training_data()
                if not training_data:
                    print("‚ö†Ô∏è IA: Pas assez de donn√©es pour l'entra√Ænement")
                    return
                
                # Entra√Æner le pr√©dicteur de skip
                self.train_skip_predictor(training_data)
                
                # Entra√Æner le pr√©dicteur de like
                self.train_like_predictor(training_data)
                
                # Entra√Æner le classificateur d'humeur
                self.train_mood_classifier(training_data)
                
                # Sauvegarder les mod√®les
                self.save_data()
                
                print("ü§ñ IA: Entra√Ænement termin√© avec succ√®s!")
                
            except Exception as e:
                print(f"‚ö†Ô∏è IA: Erreur pendant l'entra√Ænement: {e}")
            finally:
                self.is_training = False
        
        threading.Thread(target=train_thread, daemon=True).start()
    
    def prepare_training_data(self):
        """Pr√©pare les donn√©es pour l'entra√Ænement ML"""
        try:
            training_data = {
                'features': [],
                'skip_labels': [],
                'like_labels': [],
                'mood_labels': []
            }
            
            # Collecter les donn√©es des sessions d'√©coute
            for session in self.user_behavior_data['listening_sessions']:
                for song_data in session.get('songs', []):
                    features = song_data.get('features', {})
                    if not features:
                        continue
                    
                    feature_vector = self.features_to_vector(features)
                    if feature_vector is None:
                        continue
                    
                    training_data['features'].append(feature_vector)
                    
                    # Labels pour skip
                    was_skipped = song_data.get('was_skipped', False)
                    training_data['skip_labels'].append(1 if was_skipped else 0)
                    
                    # Labels pour like (chercher dans les patterns de like)
                    song_path = song_data.get('path', '')
                    is_liked = any(like['song_path'] == song_path for like in self.user_behavior_data['like_patterns'])
                    training_data['like_labels'].append(1 if is_liked else 0)
                    
                    # Labels pour mood (bas√© sur le comportement)
                    listening_ratio = song_data.get('listening_ratio', 0)
                    if listening_ratio > 0.8:
                        mood = 'positive'
                    elif listening_ratio < 0.3:
                        mood = 'negative'
                    else:
                        mood = 'neutral'
                    training_data['mood_labels'].append(mood)
            
            print(f"ü§ñ IA: {len(training_data['features'])} √©chantillons pr√©par√©s pour l'entra√Ænement")
            return training_data if len(training_data['features']) >= 10 else None
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur pr√©paration donn√©es: {e}")
            return None
    
    def train_skip_predictor(self, training_data):
        """Entra√Æne le mod√®le de pr√©diction de skip"""
        try:
            X = np.array(training_data['features'])
            y = np.array(training_data['skip_labels'])
            
            if len(np.unique(y)) < 2:
                print("‚ö†Ô∏è IA: Pas assez de vari√©t√© dans les donn√©es de skip")
                return
            
            # Normaliser les features
            X_scaled = self.scaler.fit_transform(X)
            
            # Diviser les donn√©es
            X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
            
            # Entra√Æner le mod√®le
            self.models['skip_predictor'] = RandomForestClassifier(n_estimators=100, random_state=42)
            self.models['skip_predictor'].fit(X_train, y_train)
            
            # √âvaluer
            y_pred = self.models['skip_predictor'].predict(X_test)
            accuracy = accuracy_score(y_test, y_pred)
            print(f"ü§ñ IA: Pr√©dicteur de skip entra√Æn√© - Pr√©cision: {accuracy:.2f}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur entra√Ænement skip predictor: {e}")
    
    def train_like_predictor(self, training_data):
        """Entra√Æne le mod√®le de pr√©diction de like"""
        try:
            X = np.array(training_data['features'])
            y = np.array(training_data['like_labels'])
            
            if len(np.unique(y)) < 2:
                print("‚ö†Ô∏è IA: Pas assez de vari√©t√© dans les donn√©es de like")
                return
            
            X_scaled = self.scaler.transform(X)
            X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
            
            self.models['like_predictor'] = GradientBoostingClassifier(n_estimators=100, random_state=42)
            self.models['like_predictor'].fit(X_train, y_train)
            
            y_pred = self.models['like_predictor'].predict(X_test)
            accuracy = accuracy_score(y_test, y_pred)
            print(f"ü§ñ IA: Pr√©dicteur de like entra√Æn√© - Pr√©cision: {accuracy:.2f}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur entra√Ænement like predictor: {e}")
    
    def train_mood_classifier(self, training_data):
        """Entra√Æne le classificateur d'humeur"""
        try:
            X = np.array(training_data['features'])
            y = np.array(training_data['mood_labels'])
            
            if len(np.unique(y)) < 2:
                print("‚ö†Ô∏è IA: Pas assez de vari√©t√© dans les donn√©es d'humeur")
                return
            
            X_scaled = self.scaler.transform(X)
            X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
            
            self.models['mood_classifier'] = LogisticRegression(random_state=42, max_iter=1000)
            self.models['mood_classifier'].fit(X_train, y_train)
            
            y_pred = self.models['mood_classifier'].predict(X_test)
            accuracy = accuracy_score(y_test, y_pred)
            print(f"ü§ñ IA: Classificateur d'humeur entra√Æn√© - Pr√©cision: {accuracy:.2f}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur entra√Ænement mood classifier: {e}")
    
    def recommend_best_song(self, candidate_songs):
        """Recommande la meilleure chanson parmi une liste de candidats"""
        if not candidate_songs:
            return None
        
        print(f"ü§ñ IA: Analyse de {len(candidate_songs)} chansons candidates")
        
        best_song = None
        best_score = -1
        
        for song_path in candidate_songs:
            score = self.calculate_song_score(song_path)
            print(f"ü§ñ IA: {os.path.basename(song_path)} - Score: {score:.3f}")
            
            if score > best_score:
                best_score = score
                best_song = song_path
        
        if best_song:
            print(f"ü§ñ IA: Meilleure recommandation: {os.path.basename(best_song)} (Score: {best_score:.3f})")
        
        return best_song
    
    def calculate_song_score(self, song_path):
        """Calcule un score de recommandation pour une chanson"""
        try:
            features = self.extract_song_features(song_path)
            if not features:
                return 0.0
            
            score = 0.0
            
            # Score bas√© sur l'historique
            history = self.get_song_history(song_path)
            
            # Bonus pour les chansons avec un bon ratio d'√©coute
            score += history['avg_listening_ratio'] * 0.3
            
            # Malus pour les chansons souvent skipp√©es
            if history['play_count'] > 0:
                skip_ratio = history['skip_count'] / history['play_count']
                score -= skip_ratio * 0.2
            
            # Bonus pour les chansons lik√©es
            if history['like_count'] > 0:
                score += min(history['like_count'] * 0.1, 0.3)
            
            # Score bas√© sur les pr√©dictions ML
            if ML_AVAILABLE and any(model is not None for model in self.models.values()):
                predictions = self.predict_user_behavior(song_path)
                if predictions:
                    # Bonus si faible probabilit√© de skip
                    if 'skip_probability' in predictions:
                        score += (1 - predictions['skip_probability']) * 0.2
                    
                    # Bonus si haute probabilit√© de like
                    if 'like_probability' in predictions:
                        score += predictions['like_probability'] * 0.2
            
            # Score bas√© sur le contexte temporel
            current_hour = datetime.now().hour
            
            # Analyser les patterns temporels pour cette chanson
            temporal_score = self.get_temporal_score(song_path, current_hour)
            score += temporal_score * 0.1
            
            # Normaliser le score entre 0 et 1
            score = max(0, min(1, score))
            
            return score
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur calcul score pour {song_path}: {e}")
            return 0.0
    
    def get_temporal_score(self, song_path, current_hour):
        """Calcule un score bas√© sur les patterns temporels"""
        try:
            # Analyser quand cette chanson a √©t√© √©cout√©e dans le pass√©
            hour_plays = defaultdict(int)
            total_plays = 0
            
            for session in self.user_behavior_data['listening_sessions']:
                for song_data in session.get('songs', []):
                    if song_data.get('path') == song_path:
                        song_features = song_data.get('features', {})
                        hour = song_features.get('hour', current_hour)
                        hour_plays[hour] += 1
                        total_plays += 1
            
            if total_plays == 0:
                return 0.5  # Score neutre si pas d'historique
            
            # Score bas√© sur la fr√©quence d'√©coute √† cette heure
            current_hour_plays = hour_plays.get(current_hour, 0)
            return current_hour_plays / total_plays
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur calcul score temporel: {e}")
            return 0.5
    
    def analyze_like_pattern(self, song_path):
        """Analyse le pattern de like pour une chanson"""
        try:
            features = self.extract_song_features(song_path)
            
            # Analyser les caract√©ristiques communes des chansons lik√©es
            liked_features = []
            for like in self.user_behavior_data['like_patterns']:
                if 'features' in like:
                    liked_features.append(like['features'])
            
            if len(liked_features) >= 3:
                # Analyser les patterns (dur√©e, heure, etc.)
                durations = [f.get('duration', 0) for f in liked_features]
                hours = [f.get('hour', 12) for f in liked_features]
                
                avg_duration = np.mean(durations) if durations else 0
                preferred_hours = max(set(hours), key=hours.count) if hours else 12
                
                print(f"ü§ñ IA: Pattern de like d√©tect√© - Dur√©e moyenne: {avg_duration:.0f}s, Heure pr√©f√©r√©e: {preferred_hours}h")
                
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur analyse pattern like: {e}")
    
    def analyze_favorite_pattern(self, song_path):
        """Analyse le pattern de favoris pour une chanson"""
        try:
            print(f"ü§ñ IA: Analyse du pattern de favori pour {os.path.basename(song_path)}")
            
            # Les favoris indiquent une tr√®s forte pr√©f√©rence
            # Augmenter le poids de cette chanson dans les recommandations futures
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur analyse pattern favori: {e}")
    
    def save_session_data(self):
        """Sauvegarde les donn√©es de la session courante"""
        try:
            if self.current_session['songs_played']:
                session_data = {
                    'start_time': self.current_session['start_time'],
                    'end_time': time.time(),
                    'songs': self.current_session['songs_played'].copy(),
                    'total_songs': len(self.current_session['songs_played']),
                    'skips': len(self.current_session['skips']),
                    'likes': len(self.current_session['likes']),
                    'favorites': len(self.current_session['favorites'])
                }
                
                self.user_behavior_data['listening_sessions'].append(session_data)
                
                # Garder seulement les 100 derni√®res sessions
                if len(self.user_behavior_data['listening_sessions']) > 100:
                    self.user_behavior_data['listening_sessions'] = self.user_behavior_data['listening_sessions'][-100:]
                
                print(f"ü§ñ IA: Session sauvegard√©e - {session_data['total_songs']} chansons")
                
                # R√©initialiser la session courante
                self.current_session = {
                    'start_time': time.time(),
                    'songs_played': [],
                    'skips': [],
                    'likes': [],
                    'favorites': [],
                    'volume_changes': [],
                    'listening_duration': {}
                }
                
                self.save_data()
                
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur sauvegarde session: {e}")
    
    def get_ai_insights(self):
        """Retourne des insights sur les habitudes d'√©coute de l'utilisateur"""
        try:
            insights = {
                'total_sessions': len(self.user_behavior_data['listening_sessions']),
                'total_skips': len(self.user_behavior_data['skip_patterns']),
                'total_likes': len(self.user_behavior_data['like_patterns']),
                'total_favorites': len(self.user_behavior_data['favorite_patterns']),
                'skip_rate': 0,
                'like_rate': 0,
                'preferred_hours': [],
                'model_accuracy': {}
            }
            
            # Calculer les taux
            total_songs = sum(len(session.get('songs', [])) for session in self.user_behavior_data['listening_sessions'])
            if total_songs > 0:
                insights['skip_rate'] = insights['total_skips'] / total_songs
                insights['like_rate'] = insights['total_likes'] / total_songs
            
            # Analyser les heures pr√©f√©r√©es
            hours = []
            for session in self.user_behavior_data['listening_sessions']:
                for song in session.get('songs', []):
                    features = song.get('features', {})
                    if 'hour' in features:
                        hours.append(features['hour'])
            
            if hours:
                from collections import Counter
                hour_counts = Counter(hours)
                insights['preferred_hours'] = [hour for hour, count in hour_counts.most_common(3)]
            
            print("ü§ñ IA: Insights g√©n√©r√©s:")
            print(f"  - Sessions: {insights['total_sessions']}")
            print(f"  - Taux de skip: {insights['skip_rate']:.2%}")
            print(f"  - Taux de like: {insights['like_rate']:.2%}")
            print(f"  - Heures pr√©f√©r√©es: {insights['preferred_hours']}")
            
            return insights
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur g√©n√©ration insights: {e}")
            return {}
    
    def should_retrain_models(self):
        """D√©termine s'il faut r√©entra√Æner les mod√®les"""
        try:
            # R√©entra√Æner si on a assez de nouvelles donn√©es
            total_songs = sum(len(session.get('songs', [])) for session in self.user_behavior_data['listening_sessions'])
            
            # R√©entra√Æner tous les 50 chansons √©cout√©es
            return total_songs > 0 and total_songs % 50 == 0
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur v√©rification r√©entra√Ænement: {e}")
            return False
    
    def cleanup_old_data(self):
        """Nettoie les anciennes donn√©es pour optimiser les performances"""
        try:
            # Garder seulement les donn√©es des 30 derniers jours
            cutoff_time = time.time() - (30 * 24 * 3600)
            
            # Nettoyer les patterns de skip
            self.user_behavior_data['skip_patterns'] = [
                skip for skip in self.user_behavior_data['skip_patterns']
                if skip.get('timestamp', 0) > cutoff_time
            ]
            
            # Nettoyer les patterns de like
            self.user_behavior_data['like_patterns'] = [
                like for like in self.user_behavior_data['like_patterns']
                if like.get('timestamp', 0) > cutoff_time
            ]
            
            # Nettoyer les patterns de favoris
            self.user_behavior_data['favorite_patterns'] = [
                fav for fav in self.user_behavior_data['favorite_patterns']
                if fav.get('timestamp', 0) > cutoff_time
            ]
            
            print("ü§ñ IA: Nettoyage des anciennes donn√©es effectu√©")
            
        except Exception as e:
            print(f"‚ö†Ô∏è IA: Erreur nettoyage donn√©es: {e}")

# Fonction d'int√©gration avec l'application principale
def integrate_ai_system(main_app):
    """Int√®gre le syst√®me d'IA avec l'application principale"""
    try:
        # Cr√©er l'instance du syst√®me d'IA
        ai_system = MusicAIRecommendationSystem(main_app)
        
        # Stocker la r√©f√©rence dans l'app principale
        main_app.ai_recommendation_system = ai_system
        
        print("ü§ñ IA: Syst√®me int√©gr√© avec succ√®s √† l'application")
        return ai_system
        
    except Exception as e:
        print(f"‚ö†Ô∏è IA: Erreur int√©gration: {e}")
        return None

if __name__ == "__main__":
    # Test du syst√®me
    print("ü§ñ Test du syst√®me d'IA de recommandation musicale")
    
    class MockApp:
        def __init__(self):
            self.main_playlist = []
            self.current_index = 0
    
    mock_app = MockApp()
    ai_system = MusicAIRecommendationSystem(mock_app)
    
    # Test des fonctionnalit√©s de base
    test_song = "test_song.mp3"
    ai_system.on_song_start(test_song)
    time.sleep(1)
    ai_system.on_song_end(test_song, was_skipped=False, listening_duration=30)
    ai_system.on_song_liked(test_song)
    
    # Afficher les insights
    insights = ai_system.get_ai_insights()
    print("Insights:", insights)