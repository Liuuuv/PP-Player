#!/usr/bin/env python3
"""
Test de l'ajustement du scroll apr√®s chargement vers le haut
V√©rifie que le scroll est correctement ajust√© pour √©viter les chargements en boucle
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
parent_dir = os.path.dirname(os.path.abspath(__file__))
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

def test_scroll_adjustment_calculation():
    """Test des calculs d'ajustement du scroll"""
    print("üß™ TEST: Calculs d'ajustement du scroll apr√®s chargement haut")
    
    # Sc√©narios de test
    test_cases = [
        {
            "name": "Chargement de 10 √©l√©ments",
            "items_added": 10,
            "item_height": 60,
            "total_height": 3000,
            "current_position": 0.1,
            "expected_increase": True
        },
        {
            "name": "Chargement de 5 √©l√©ments",
            "items_added": 5,
            "item_height": 60,
            "total_height": 1800,
            "current_position": 0.05,
            "expected_increase": True
        },
        {
            "name": "Chargement de 20 √©l√©ments",
            "items_added": 20,
            "item_height": 60,
            "total_height": 6000,
            "current_position": 0.2,
            "expected_increase": True
        }
    ]
    
    for case in test_cases:
        print(f"\nüìä {case['name']}:")
        print(f"   ‚Ä¢ √âl√©ments ajout√©s: {case['items_added']}")
        print(f"   ‚Ä¢ Hauteur par √©l√©ment: {case['item_height']}px")
        print(f"   ‚Ä¢ Hauteur totale: {case['total_height']}px")
        print(f"   ‚Ä¢ Position actuelle: {case['current_position']}")
        
        # Calculer l'ajustement
        total_height_added = case['items_added'] * case['item_height']
        scroll_offset_ratio = total_height_added / case['total_height']
        new_position = min(1.0, case['current_position'] + scroll_offset_ratio)
        
        print(f"   ‚Ä¢ Hauteur ajout√©e: {total_height_added}px")
        print(f"   ‚Ä¢ Ratio de d√©calage: {scroll_offset_ratio:.4f}")
        print(f"   ‚Ä¢ Nouvelle position: {new_position:.4f}")
        
        # V√©rifier si l'augmentation est attendue
        position_increased = new_position > case['current_position']
        if position_increased == case['expected_increase']:
            print(f"   ‚úÖ R√©sultat attendu (position {'augment√©e' if position_increased else 'inchang√©e'})")
        else:
            print(f"   ‚ùå R√©sultat inattendu")
    
    return True

def test_loading_protection():
    """Test de la protection contre les chargements en boucle"""
    print("\nüß™ TEST: Protection contre les chargements en boucle")
    
    try:
        import tkinter as tk
        from main import MusicPlayer
        from search_tab.config import update_main_playlist_config
        
        # Activer le debug
        update_main_playlist_config(debug_scroll=True)
        
        # Cr√©er une instance de test
        root = tk.Tk()
        root.withdraw()
        player = MusicPlayer(root)
        
        # Simuler une playlist
        player.main_playlist = [f"track_{i:03d}.mp3" for i in range(0, 100)]
        player.current_index = 50
        
        # Configurer le syst√®me
        player._setup_dynamic_scroll()
        player._last_window_start = 40
        player._last_window_end = 60
        
        print("üìä √âtat initial:")
        print(f"   ‚Ä¢ Fen√™tre: {player._last_window_start}-{player._last_window_end}")
        print(f"   ‚Ä¢ Flag de chargement: {getattr(player, '_loading_above_in_progress', False)}")
        
        # Premier appel - devrait fonctionner
        print("\nüîÑ Premier appel de _load_more_songs_above:")
        try:
            player._load_more_songs_above()
            print("‚úÖ Premier chargement accept√©")
            flag_after_first = getattr(player, '_loading_above_in_progress', False)
            print(f"   ‚Ä¢ Flag apr√®s premier chargement: {flag_after_first}")
        except Exception as e:
            print(f"‚ùå Erreur premier chargement: {e}")
        
        # Deuxi√®me appel imm√©diat - devrait √™tre bloqu√©
        print("\nüîÑ Deuxi√®me appel imm√©diat:")
        try:
            player._load_more_songs_above()
            print("‚ö†Ô∏è Deuxi√®me chargement (devrait √™tre bloqu√©)")
        except Exception as e:
            print(f"‚ùå Erreur deuxi√®me chargement: {e}")
        
        # Simuler l'attente et la r√©initialisation du flag
        print("\n‚è±Ô∏è Simulation de l'attente (500ms):")
        def check_after_delay():
            flag_after_delay = getattr(player, '_loading_above_in_progress', False)
            print(f"   ‚Ä¢ Flag apr√®s d√©lai: {flag_after_delay}")
            if not flag_after_delay:
                print("‚úÖ Flag correctement r√©initialis√©")
            else:
                print("‚ö†Ô∏è Flag toujours actif")
        
        root.after(600, check_after_delay)  # Attendre un peu plus que le d√©lai
        root.after(700, root.quit)  # Quitter apr√®s le test
        
        # Lancer la boucle d'√©v√©nements bri√®vement
        root.mainloop()
        
        root.destroy()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test protection: {e}")
        return False

def test_scroll_position_scenarios():
    """Test de diff√©rents sc√©narios de position de scroll"""
    print("\nüß™ TEST: Sc√©narios de position de scroll")
    
    scenarios = [
        {
            "name": "Scroll tr√®s en haut (0.0)",
            "initial_position": 0.0,
            "items_added": 10,
            "should_trigger_new_load": False  # Apr√®s ajustement, ne devrait plus d√©clencher
        },
        {
            "name": "Scroll l√©g√®rement en haut (0.05)",
            "initial_position": 0.05,
            "items_added": 10,
            "should_trigger_new_load": False
        },
        {
            "name": "Scroll au milieu (0.5)",
            "initial_position": 0.5,
            "items_added": 10,
            "should_trigger_new_load": False
        }
    ]
    
    for scenario in scenarios:
        print(f"\nüìä {scenario['name']}:")
        
        # Param√®tres de test
        item_height = 60
        total_height = 3000
        threshold = 0.1  # Seuil de d√©clenchement typique
        
        # Calculer la nouvelle position apr√®s ajustement
        total_height_added = scenario['items_added'] * item_height
        scroll_offset_ratio = total_height_added / total_height
        new_position = min(1.0, scenario['initial_position'] + scroll_offset_ratio)
        
        print(f"   ‚Ä¢ Position initiale: {scenario['initial_position']}")
        print(f"   ‚Ä¢ Position apr√®s ajustement: {new_position:.4f}")
        print(f"   ‚Ä¢ Seuil de d√©clenchement: {threshold}")
        
        # V√©rifier si cela d√©clencherait un nouveau chargement
        would_trigger = new_position <= threshold
        
        print(f"   ‚Ä¢ D√©clencherait nouveau chargement: {'Oui' if would_trigger else 'Non'}")
        
        if would_trigger == scenario['should_trigger_new_load']:
            print("   ‚úÖ Comportement attendu")
        else:
            print("   ‚ö†Ô∏è Comportement inattendu")
    
    return True

def main():
    """Fonction principale de test"""
    print("üéØ TEST DE L'AJUSTEMENT DU SCROLL APR√àS CHARGEMENT VERS LE HAUT")
    print("=" * 80)
    
    # Tests
    calc_ok = test_scroll_adjustment_calculation()
    protection_ok = test_loading_protection()
    scenarios_ok = test_scroll_position_scenarios()
    
    # R√©sum√©
    print("\n" + "=" * 80)
    print("üìä R√âSUM√â DES TESTS:")
    print(f"   ‚Ä¢ Calculs d'ajustement: {'‚úÖ OK' if calc_ok else '‚ùå √âCHEC'}")
    print(f"   ‚Ä¢ Protection chargement: {'‚úÖ OK' if protection_ok else '‚ùå √âCHEC'}")
    print(f"   ‚Ä¢ Sc√©narios de position: {'‚úÖ OK' if scenarios_ok else '‚ùå √âCHEC'}")
    
    if all([calc_ok, protection_ok, scenarios_ok]):
        print("\nüéâ TOUS LES TESTS R√âUSSIS!")
        print("‚úÖ L'ajustement du scroll apr√®s chargement vers le haut fonctionne")
    else:
        print("\n‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â")
        print("üîß V√©rifiez les erreurs ci-dessus")
    
    print("\nüìã FONCTIONNALIT√âS AJOUT√âES:")
    print("   ‚Ä¢ _adjust_scroll_after_top_load() pour ajuster le scroll apr√®s chargement")
    print("   ‚Ä¢ Protection contre les chargements en boucle avec _loading_above_in_progress")
    print("   ‚Ä¢ Calcul proportionnel du d√©calage bas√© sur la hauteur des √©l√©ments")
    print("   ‚Ä¢ D√©lai de 500ms pour √©viter les chargements r√©p√©t√©s")
    print("   ‚Ä¢ Application diff√©r√©e de l'ajustement avec root.after()")
    
    print("\nüéÆ R√âSULTAT ATTENDU:")
    print("   ‚Ä¢ AVANT: Scroll en haut ‚Üí Chargement ‚Üí Scroll reste en haut ‚Üí Nouveau chargement...")
    print("   ‚Ä¢ APR√àS: Scroll en haut ‚Üí Chargement ‚Üí Scroll ajust√© vers le bas ‚Üí Pas de nouveau chargement")
    print("   ‚Ä¢ L'utilisateur ne remarque pas l'ajout d'√©l√©ments")
    print("   ‚Ä¢ Exp√©rience de scroll fluide et naturelle")

if __name__ == "__main__":
    main()