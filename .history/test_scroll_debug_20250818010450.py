#!/usr/bin/env python3
"""
Test du scroll avec messages de debug pour diagnostiquer le probl√®me
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
parent_dir = os.path.dirname(os.path.abspath(__file__))
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)

def test_scroll_debug_messages():
    """Test pour v√©rifier que les messages de debug s'affichent"""
    print("=== Test des messages de debug du scroll ===")
    
    try:
        from main import MusicPlayer
        from search_tab.config import update_main_playlist_config
        import tkinter as tk
        
        # Activer le debug
        update_main_playlist_config(debug_scroll=True, debug_windowing=True)
        
        # Cr√©er une instance avec interface minimale
        root = tk.Tk()
        root.title("Test Debug Scroll")
        root.geometry("800x600")
        
        print("‚úÖ DEBUG: Fen√™tre Tkinter cr√©√©e")
        
        player = MusicPlayer(root)
        
        # Simuler une playlist
        player.main_playlist = [f"test_{i:03d}.mp3" for i in range(50)]
        player.current_index = 25
        
        print(f"‚úÖ DEBUG: Playlist cr√©√©e avec {len(player.main_playlist)} musiques")
        
        # Rafra√Æchir l'affichage
        try:
            player._refresh_main_playlist_display(force_full_refresh=True)
            print("‚úÖ DEBUG: Affichage rafra√Æchi")
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG: Erreur rafra√Æchissement: {e}")
        
        # V√©rifier que les fonctions de debug existent
        functions_to_check = [
            '_setup_infinite_scroll',
            '_update_display_based_on_scroll_position',
            '_update_windowed_display',
            '_on_scroll_with_update'
        ]
        
        for func_name in functions_to_check:
            if hasattr(player, func_name):
                print(f"‚úÖ DEBUG: Fonction {func_name} disponible")
            else:
                print(f"‚ùå DEBUG: Fonction {func_name} manquante")
        
        # V√©rifier les attributs du canvas
        if hasattr(player, 'playlist_canvas'):
            print(f"‚úÖ DEBUG: playlist_canvas trouv√©: {type(player.playlist_canvas)}")
            
            # V√©rifier les bindings
            try:
                bindings = player.playlist_canvas.bind()
                print(f"üìã DEBUG: Bindings sur playlist_canvas: {bindings}")
            except Exception as e:
                print(f"‚ö†Ô∏è DEBUG: Erreur lecture bindings: {e}")
        else:
            print("‚ùå DEBUG: playlist_canvas non trouv√©")
        
        if hasattr(player, 'playlist_scrollbar'):
            print(f"‚úÖ DEBUG: playlist_scrollbar trouv√©: {type(player.playlist_scrollbar)}")
        else:
            print("‚ùå DEBUG: playlist_scrollbar non trouv√©")
        
        # Test manuel de la fonction de synchronisation
        print("\n--- Test manuel de la synchronisation ---")
        try:
            player._update_display_based_on_scroll_position()
            print("‚úÖ DEBUG: Test manuel de synchronisation r√©ussi")
        except Exception as e:
            print(f"‚ùå DEBUG: Erreur test manuel: {e}")
        
        # Afficher des instructions pour le test manuel
        print("\n" + "="*60)
        print("üñ±Ô∏è INSTRUCTIONS POUR LE TEST MANUEL:")
        print("="*60)
        print("1. Une fen√™tre de test devrait s'ouvrir")
        print("2. Allez dans l'onglet 'Recherche'")
        print("3. Scrollez avec la molette dans la playlist")
        print("4. Observez les messages de debug dans cette console")
        print("5. Fermez la fen√™tre pour terminer le test")
        print("="*60)
        
        # Lancer la boucle principale pour permettre l'interaction
        root.mainloop()
        
        print("\n‚úÖ DEBUG: Test termin√©")
        return True
        
    except Exception as e:
        print(f"\n‚ùå DEBUG: Erreur g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üîç TEST DE DEBUG DU SCROLL")
    print("="*60)
    
    success = test_scroll_debug_messages()
    
    if success:
        print("\n‚úÖ Test de debug termin√©")
        print("V√©rifiez les messages de debug ci-dessus pour diagnostiquer le probl√®me")
    else:
        print("\n‚ùå Erreur lors du test de debug")